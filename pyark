#!/usr/bin/python3.6

from arkserversnet import arkserversnet
from arkupdater import arkupd
from clusterevents import eventwatcher
from cmdlistener import clisten
from discordbot import discordbot
from gchatrelay import gchatrelay
from git import Repo
from kicker import kicker
from modules.configreader import hstname, logfile, instance, numinstances, is_asdatapuller, is_statscollector, is_lotterymanager, is_discordbot, webserver_enabled, webserver_ip, webserver_port, loglevel, adminfile, debugfile, pointsfile, colorlogfile, crashlogfile, critlogfile, instr
from modules.dbhelper import dbupdate, dbquery
from modules.timehelper import Now
from modules.processlock import plock
from onlinemonitor import onlineupdate
from statcollector import oscollect
from sys import exit
import sys
from time import sleep
from web import create_app
from os import stat
import argparse
from loguru import logger as log
import lottery
import subprocess
import threading
import shutil

__author__ = "Ian Perry"
__copyright__ = "Copyright 2018, Galaxy Media"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Ian Perry"
__email__ = "ianperry99@gmail.com"
__progname__ = "pyark-daemon"
__description__ = "pyark daemon service"
__detaildesc__ = ""
__name__ = "pyark"

parser = argparse.ArgumentParser(prog=__progname__)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-q', '--quiet', action='store_true',
                    help='supress logging output to console. default: error logging')
parser.add_argument('-d', '--debug', action='store_true', help='verbose output (debug)')
parser.add_argument('-dd', '--trace', action='store_true', help='super verbose output (trace)')

args = parser.parse_args()

logformat = '{time:YYYY-MM-DD HH:mm:ss.SSS} | {extra[hostname]: <5} | {level: <6} | {message} | {name}:{function}:{line}'

colorlogformat = '<level>{time:YYYY-MM-DD HH:mm:ss.SSS}</level> | <level>{extra[hostname]: <5}</level> | <level>{level: <6}</level> | <level>{message: <75}</level> | <fg 109>{name}:{function}:{line}</fg 109>'


log.configure(extra={'hostname': hstname, 'instance': 'MAIN'})

log.level("START", no=38, color="<light-yellow>", icon="¤")
log.level("ADMIN", no=15, color="<light-yellow>", icon="¤")
log.level("JOIN", no=21, color="<fg 13>", icon="¤")
log.level("LEAVE", no=21, color="<fg 5>", icon="¤")
log.level("POINTS", no=22, color="<light-green>", icon="¤")
log.level("LOTTO", no=23, color="<green>", icon="¤")
log.level("VOTE", no=20, color="<fg 208>", icon="¤")
log.level("CRASH", no=29, color="<RED><white><bold>", icon="¤")
log.level("WIPE", no=20, color="<fg 86>", icon="¤")
log.level("UPDATE", no=20, color="<light-cyan>", icon="¤")
log.level("MAINT", no=20, color="<fg 86>", icon="¤")
log.level("GIT", no=30, color="<yellow>", icon="¤")
log.level("TEST", no=20, color="<light-red>", icon="¤")

# Console Logging
if args.quiet:
    log.add(sink=sys.stderr, level=50, backtrace=False, diagnose=False, colorize=False, format=logformat)
elif args.trace:
    log.add(sink=sys.stdout, level=5, backtrace=True, diagnose=True, colorize=True, format=colorlogformat)
elif args.debug:
    log.add(sink=sys.stdout, level=10, backtrace=True, diagnose=True, colorize=True, format=colorlogformat)
else:
    log.add(sink=sys.stdout, level=20, backtrace=True, diagnose=True, colorize=True, format=colorlogformat)

# Info Logging pyark.log
log.add(sink=logfile, level=20, enqueue=True, backtrace=False, diagnose=False, colorize=False, format=logformat, rotation="1 day", retention="30 days", compression="gz")

# Info Color Logging pyark-color.log
log.add(sink=colorlogfile, level=20, enqueue=True, backtrace=False, diagnose=False, colorize=True, format=colorlogformat, rotation="1 day", retention="30 days", compression="gz")

# Debug Logging debug.log
if loglevel == 'DEBUG' or loglevel == 'TRACE' or args.debug or args.trace:
    if loglevel == 'DEBUG' or args.debug:
        lev = 10
    else:
        lev = 5
    log.add(sink=debugfile, level=lev, enqueue=True, backtrace=True, diagnose=True, colorize=True, format=colorlogformat, rotation="1 MB", retention="30 days", compression="gz", delay=True)

# Points Logging points.log
log.add(sink=pointsfile, level=22, enqueue=True, backtrace=False, diagnose=False, colorize=False, format=logformat, rotation="1 week", retention="30 days", compression="gz", delay=True, filter='POINTS')

# Admin Logging admin.log
log.add(sink=adminfile, level=15, enqueue=True, backtrace=False, diagnose=False, colorize=False, format=logformat, rotation="1 week", retention="30 days", compression="gz", delay=True, filter='ADMIN')

# Crash Logging admin.log
log.add(sink=crashlogfile, level=29, enqueue=True, backtrace=False, diagnose=False, colorize=False, format=logformat, rotation="1 week", retention="30 days", compression="gz", delay=True, filter='CRASH')

# Crit Logging admin.log
log.add(sink=critlogfile, level=40, enqueue=True, backtrace=True, diagnose=True, colorize=True, format=colorlogformat, rotation="1 MB", retention="30 days", compression="gz", delay=True)


plock()

if loglevel == 'DEBUG' or args.debug:
    log.log('START', f'Pyark daemon is starting on {hstname} in **DEBUG MODE**')
elif loglevel == 'TRACE' or args.trace:
    log.log('START', f'Pyark daemon is starting on {hstname} in ***TRACE MODE***')
else:
    log.log('START', f'Pyark daemon is starting on {hstname} in normal mode')

checkgit = 0


def gitupdatecheck():
    localdir = '/home/ark/pyark'
    repo = Repo(localdir)
    origin = repo.remotes.origin
    origin.fetch()
    if repo.head.commit != origin.refs[0].commit:
        log.log('GIT', f'newer pyark version found on repo. updating and restarting...')
        origin.pull()
        # origin.push()
        subprocess.run('systemctl restart pyark', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)


def main():
    global checkgit
    global instance
    # dbupdate('CREATE TABLE IF NOT EXISTS general(cfgver TEXT)')
    # dbupdate('CREATE TABLE IF NOT EXISTS instances(name TEXT, lastrestart REAL, lastdinowipe REAL, \
    #          needsrestart TEXT, lastvote REAL, restartreason TEXT, cfgver INTEGER, restartcountdown INTEGER)')
    # dbupdate('CREATE TABLE IF NOT EXISTS players(steamid TEXT, playername TEXT, lastseen TEXT, server TEXT, \
    #          playedtime TEXT, rewardpoints INTEGER, firstseen TEXT, connects INTEGER)')
    for ins in range(numinstances):
        chkinst = dbquery("SELECT * FROM instances WHERE name = '%s'" % (instance[ins]['name'],))
        if not chkinst:
            log.warning(f'server {instance[ins]["name"]} does not exist in the server table. adding it.')
            dbupdate("INSERT INTO instances (name, lastrestart, lastdinowipe, needsrestart, lastvote, restartreason, cfgver, restartcountdown) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (instance[ins]["name"], Now(), Now(), 'False', Now(), 'admin restart', 0, 30))
        else:
            log.debug(f'found server {instance[ins]["name"]} in server table')
    log.debug('database initilization complete')
    checkgit = 0
    arkupdt = threading.Thread(name='arkupdater', target=arkupd)
    arkupdt.start()
    log.debug('deleting global chat buffer')
    dbupdate('DELETE FROM globalbuffer')
    for each in range(numinstances):
        inst = instance[each]['name']
        instance[each]['kickthread'] = threading.Thread(name='%s-kicker' % inst, target=kicker, args=(inst,), daemon=True)
        instance[each]['kickthread'].start()
        instance[each]['cmdthread'] = threading.Thread(name='%s-cmdlistener' % inst, target=clisten, args=(inst,), daemon=True)
        instance[each]['cmdthread'].start()
        instance[each]['gchatthread'] = threading.Thread(name='%s-gchatrelay' % inst, target=gchatrelay, args=(inst,), daemon=True)
        instance[each]['gchatthread'].start()
        instance[each]['onlinethread'] = threading.Thread(name='%s-onlinemon' % inst, target=onlineupdate, args=(inst,), daemon=True)
        instance[each]['onlinethread'].start()
        instance[each]['eventthread'] = threading.Thread(name='%s-events' % inst, target=eventwatcher, args=(inst,), daemon=True)
        instance[each]['eventthread'].start()
    if is_asdatapuller == "True":
        arkserversnt = threading.Thread(name='arksvrnet-datapuller', target=arkserversnet, daemon=True)
        arkserversnt.start()
    if is_discordbot == "True":
        discordt = threading.Thread(name='discord-bot', target=discordbot, daemon=True)
        discordt.start()
    if is_lotterymanager == "True":
        lotteryt = threading.Thread(name='lottery-watcher', target=lottery.lotterywatcher, daemon=True)
        lotteryt.start()
    if is_statscollector == "True":
        ostat = threading.Thread(name='stat-collector', target=oscollect, daemon=True)
        ostat.start()
    if webserver_enabled == "True":
        log.log('START', f'Starting Web Server on IP: {webserver_ip} PORT: {webserver_port}')
    try:
        app = create_app('config.BaseConfig')
        webserver = threading.Thread(name='webserver', target=app.run, kwargs={'host': webserver_ip, 'port': webserver_port}, daemon=True)
        webserver.start()
    except:
        log.exception(f'Web Server failed to start.')
    sleep(5)
    log.info(f'Pyark is ready and serving [{instr.title()}] on {hstname}...')
    while True:
        try:
            if shutil.disk_usage('/').free < 2000000000:
                log.critical('Root Disk under 2Gig. Shutting instance and script down')
                subprocess.run('arkmanager stop --warn @all', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run('/home/ark/pyark/pyarlcli stop', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                exit()
        except:
            log.critical('unable to determine root freespace')
            sleep(60)
            exit()
        try:
            if stat('/home/ark/shared/logs/pyark/pyark.log').st_size > 1000000000:
                log.critical('Pyark log over 1Gig. Shutting script down')
                subprocess.run('/home/ark/pyark/pyarkcli stop', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                exit()
        except:
            log.critical('unable to determine pyark log filesize')
            sleep(60)
        try:
            if checkgit == 0:
                gitupdatecheck()
                checkgit += 1
            elif checkgit == 6:
                checkgit = 0
            else:
                checkgit += 1
            sleep(60)
            # for each in range(numinstances):
            # log.debug(f'{instance[each]["name"]} {list(instance[each].keys())}')
            if not arkupdt.is_alive():
                t = 'ark updater'
                log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if is_asdatapuller == "True":
                if not arkserversnt.is_alive():
                    t = 'arkserversnet datapuller'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if is_discordbot == "True":
                if not discordt.is_alive():
                    t = 'discord bot'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if is_lotterymanager == "True":
                if not lotteryt.is_alive():
                    t = 'lottery watch'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if is_statscollector == "True":
                if not ostat.is_alive():
                    t = 'stat collector'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            for each in range(numinstances):
                inst = instance[each]['name']
                if not instance[each]['cmdthread'].is_alive():
                    t = f'{inst} command listener'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
                if not instance[each]['kickthread'].is_alive():
                    t = f'{inst} kicklist kicker'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
                if not instance[each]['gchatthread'].is_alive():
                    t = f'{inst} global chat relay'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
                if not instance[each]['onlinethread'].is_alive():
                    t = f'{inst} online monitor'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
                if not instance[each]['eventthread'].is_alive():
                    t = f'{inst} event monitor'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if webserver_enabled == "True":
                if not webserver.is_alive():
                    t = f'web server'
                    log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
        except KeyboardInterrupt:
            log.critical(f'Keyboard Interrupt Exiting.')
            exit()
        except:
            log.exception(f'exception in main loop')
            sleep(60)


if __name__ == 'pyark':
    gitupdatecheck()
    gitcheck = 1
    main()
