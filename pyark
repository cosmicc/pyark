#!/usr/bin/python3

import logging, argparse, sqlite3, time, threading, socket, subprocess
from arkupdater import arkupd
from cmdlistener import clisten
from onlinemonitor import onlineupdate
from discordbot import discordbot
from kicker import kicker
from configreader import *
from gchatrelay import *

__author__ = "Ian Perry"
__copyright__ = "Copyright 2018, Galaxy Media"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Ian Perry"
__email__ = "ianperry99@gmail.com"
__progname__ = "pyark-daemon"
__description__ = "pyark daemon service"
__detaildesc__ = ""

hstname = socket.gethostname()
log = logging.getLogger(name=hstname)

configfile = '/home/ark/pyark.cfg'

parser = argparse.ArgumentParser(prog=__progname__)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-q', '--quiet', action='store_true', help='supress logging output to console. default: error logging')
parser.add_argument('--debug', action='store_true', help='verbose output (debug)')
args = parser.parse_args()
if args.debug == True:  # changed to false to force debugging
    log.setLevel(logging.DEBUG)
else:
    log.setLevel(logging.INFO)
console_format = logging.Formatter('%(asctime)s:[%(levelname)s]:%(name)s:%(threadName)s:%(message)s')
log_format = logging.Formatter('%(asctime)s:[%(levelname)s]:%(name)s:%(threadName)s:%(message)s')

if args.quiet is False:
    log_console = logging.StreamHandler()
    log.addHandler(log_console)
    log_console.setFormatter(console_format)
log_fileh = logging.FileHandler(logfile)
log.addHandler(log_fileh)
log_fileh.setFormatter(log_format)

log.info(f'>>> pyark daemon is starting on {hstname}')

def main():
    numinstances = int(config.get('general', 'instances'))

    imthedbot = config.get('general','isdiscordbot')

    instance = [dict() for x in range(numinstances)]
    instr = ''

    for each in range(numinstances):
        a = config.get('instance%s' % (each), 'name')
        b = config.get('instance%s' % (each), 'logfile')
        instance[each] = {'name':a,'logfile':b}
        if instr == '':
            instr = '%s' % (a)
        else:
            instr=instr + ', %s' % (a)

    sharedpath = config.get('general', 'shared')

    sqldb = f'{sharedpath}/db/pyark.db'

    log.debug(f'opening pyark sql database: {sqldb}')

    conn = sqlite3.connect(sqldb)
    c = conn.cursor()

    c.execute('CREATE TABLE IF NOT EXISTS general(cfgver TEXT)')
    c.execute('CREATE TABLE IF NOT EXISTS instances(name TEXT, lastrestart REAL, lastdinowipe REAL, needsrestart TEXT, lastvote REAL, restartreason TEXT, cfgver INTEGER, restartcountdown INTEGER)')
    c.execute('CREATE TABLE IF NOT EXISTS players(steamid TEXT, playername TEXT, lastseen TEXT, server TEXT, playedtime TEXT, rewardpoints INTEGER, firstseen TEXT, connects INTEGER)')

    for ins in range(numinstances):
        c.execute('SELECT * FROM instances WHERE name = ?', [(instance[ins]['name']),])
        chkinst = c.fetchall()
        if not chkinst:
            now = time.time()
            log.warning(f'server {instance[ins]["name"]} does not exist in the server table. adding it.') 
            c.execute('INSERT INTO instances (name, lastrestart, lastdinowipe, needsrestart, lastvote) VALUES (?, ?, ?, ?, ?)', (instance[ins]["name"], now, now, 'False', now))
            conn.commit()
        else:
            log.debug(f'found server {instance[ins]["name"]} in server table')
    c.close()
    conn.close()

    log.debug('database initilization complete')
    
    arkupdt = threading.Thread(name='arkupdater', target = arkupd)
    arkupdt.start()

    log.debug('deleting global chat buffer')
    conn = sqlite3.connect(sqldb)
    c = conn.cursor()
    c.execute('DELETE FROM globalbuffer')
    conn.commit()
    c.close()
    conn.close()

    for each in range(numinstances):
        inst = instance[each]['name']
        instance[each]['kickthread'] = threading.Thread(name='%s-kicker' % inst, target = kicker, args=(inst,))
        instance[each]['kickthread'].start()
        instance[each]['cmdthread'] = threading.Thread(name='%s-cmdlistener' % inst, target = clisten, args=(inst,))
        instance[each]['cmdthread'].start()
        instance[each]['gchatthread'] = threading.Thread(name = '%s-gchatrelay' % inst, target=gchatrelay, args=(inst,))
        instance[each]['gchatthread'].start()
        instance[each]['onlinethread'] = threading.Thread(name = '%s-onlinemon' % inst, target=onlineupdate, args=(inst,))
        instance[each]['onlinethread'].start()

    if imthedbot == "True":
        discordt = threading.Thread(name='discord-bot', target = discordbot)
        discordt.start()

    while True:
        time.sleep(60)
        log.debug(threading.enumerate())
        if not arkupdt.is_alive():
            t = 'ark updater'
            log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
        if imthedbot == "True":
            if not discordt.is_alive():
                t = 'discord bot'
                log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
        for each in range(numinstances):
            inst = instance[each]['name']
            if not instance[each]['cmdthread'].is_alive():
                t = f'{inst} command listener'
                log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
        for each in range(numinstances):
            inst = instance[each]['name']
            if not instance[each]['kickthread'].is_alive():
                t = f'{inst} kicklist kicker'
                log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if not instance[each]['gchatthread'].is_alive():
                t = f'{inst} global chat relay'
                log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')
            if not instance[each]['onlinethread'].is_alive():
                t = f'{inst} online monitor'
                log.critical(f'!!!! CRITICAL ERROR! thread {t} has crashed!!')



if __name__ == '__main__':
    main()
