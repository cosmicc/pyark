#!/usr/bin/env python3.6

from modules.configreader import instance, hstname, jsonlogfile, colorlogfile, jsondebugfile, critlogfile, loglevel, instr, shortlogformat, longlogformat
from modules.dbhelper import dbquery, dbupdate
from modules.pushover import pushover
from modules.instances import getinststatus, isinstanceenabled
from modules.players import getliveplayersonline
from arkupdater import restartinstnow
from sys import exit
from time import sleep
from modules.timehelper import Secs, Now, elapsedTime
from modules.servertools import serverexec, setarknice, getinstpid
import psutil
import argparse
from loguru import logger as log
import os
import sys
import modules.logging

__author__ = "Ian Perry"
__copyright__ = "Copyright 2018, Galaxy Media"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Ian Perry"
__email__ = "ianperry99@gmail.com"
__progname__ = "pyark-daemon"
__description__ = "ark instance watchdog service"
__detaildesc__ = ""
__name__ = "arkwatchdog"

parser = argparse.ArgumentParser(prog=__progname__)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-q', '--quiet', action='store_true',
                    help='supress logging output to console. default: error logging')
parser.add_argument('-d', '--debug', action='store_true', help='verbose output (debug)')
parser.add_argument('-t', '--trace', action='store_true', help='super verbose output (trace)')
args = parser.parse_args()

# Console Logging
if args.quiet:
    log.add(sink=sys.stderr, level=50, backtrace=False, diagnose=False, colorize=False, format=longlogformat)
elif args.trace:
    log.add(sink=sys.stdout, level=5, backtrace=True, diagnose=True, colorize=True, format=longlogformat)
elif args.debug:
    log.add(sink=sys.stdout, level=10, backtrace=True, diagnose=True, colorize=True, format=longlogformat)
else:
    log.add(sink=sys.stdout, level=20, backtrace=True, diagnose=True, colorize=True, format=longlogformat)

# Json logging pyarklog.json
log.add(sink=jsonlogfile, level=20, buffering=1, enqueue=True, backtrace=False, diagnose=False, serialize=True, colorize=True, format=shortlogformat)
# Color logging pyark.log
log.add(sink=colorlogfile, level=20, buffering=1, enqueue=True, backtrace=False, diagnose=False, colorize=True, format=longlogformat)
# Debug json logging debuglog.json
if loglevel == 'DEBUG' or loglevel == 'TRACE' or args.debug or args.trace:
    if loglevel == 'DEBUG' or args.debug:
        lev = 10
    else:
        lev = 5
    log.add(sink=jsondebugfile, level=lev, buffering=1, enqueue=True, backtrace=True, diagnose=True, serialize=True, colorize=True, format=longlogformat, delay=True)

# Error Logging crit.log
log.add(sink=critlogfile, level=40, buffering=1, enqueue=True, backtrace=True, diagnose=True, colorize=True, format=longlogformat, delay=True)


def issharedmounted():
    return os.path.ismount('/home/ark/shared')


def float_trunc_1dec(num):
    try:
        tnum = num // 0.1 / 10
    except:
        return False
    else:
        return tnum


@log.catch
def serverneedsrestart():
    if os.path.isfile('/var/run/reboot-required'):
        return True
    else:
        return False


@log.catch
def arkprocesscpu(inst):
    arkprocess = psutil.Process(getinstpid(inst))
    return arkprocess.cpu_percent(interval=2)


@log.catch
def getlaststart(inst):
    laststart = dbquery("SELECT lastrestart FROM instances WHERE name = '%s'" % (inst,), fetch='one', single=True)
    return laststart


@log.catch
def getserveruptime():
    return elapsedTime(Now(), psutil.boot_time())


@log.catch
def getcpustats():
    rawcpuload = psutil.getloadavg()
    numcores = psutil.cpu_count()
    cpufreq = psutil.cpu_freq()[0] / 1000
    load1 = (rawcpuload[0] / numcores) * 100
    load5 = (rawcpuload[1] / numcores) * 100
    load15 = (rawcpuload[2] / numcores) * 100
    return numcores, float_trunc_1dec(cpufreq), float_trunc_1dec(load1), float_trunc_1dec(load5), float_trunc_1dec(load15)


@log.catch
def getservermem():
    process = serverexec(['free', '-m'], nice=19, null=False)
    lines = process.stdout.decode().split('\n')
    memvalues = lines[1].strip().split()
    swapvalues = lines[2].strip().split()
    memfree = memvalues[3]
    memavailable = memvalues[6]
    swapused = swapvalues[2]
    return memfree, memavailable, swapused


@log.catch
def didserverjustboot():
    rawuptime = serverexec(['tail', '/proc/uptime'], nice=19, null=False)
    rawup = rawuptime.stdout.decode('utf-8').split(' ')
    if float(rawup[0]) < Secs['3min']:
        return True
    else:
        return False


@log.catch
def getinstmem(inst):
    instpid = getinstpid(inst)
    rawsts = serverexec(['ps', '-p', f'{instpid}', '-o', 'rss,vsz'], nice=19, null=False)
    instrss, instvsz = rawsts.stdout.decode('utf-8').split('\n')[1].split(' ')
    instrss = int(instrss) / 1000000 // 0.01 / 100
    instvsz = int(instvsz) / 1000000 // 0.01 / 100
    return instrss, instvsz


@log.catch
def checkpyark():
    try:
        for line in open('/tmp/pyark.pid', 'r'):
            pyarkpid = int(line)
        pyarkstatus = 'N/A'
        if psutil.pid_exists(pyarkpid):
            pyarkproc = psutil.Process(pid=pyarkpid)
            if pyarkproc.name() == 'pyark':
                pyarkstatus = pyarkproc.status()
                log.trace(f'Pyark process [{pyarkpid}] is running with status [{pyarkstatus}]')
            else:
                log.critical(f'Pyark PID [{pyarkpid}] is NOT the pyark process [{pyarkproc.name()}]')
        else:
            log.error(f'Pyark process [{pyarkpid}] is not running. Restarting.')
            os.system('systemctl restart pyark')
    except FileNotFoundError:
        log.error(f'Pyark process [{pyarkpid}] is not running. Restarting.')
        os.system('systemctl restart pyark')
    except:
        log.exception('checkpyark error')


@log.catch
def startserver(inst, restart=False):
    if issharedmounted():
        if loglevel != 'DEBUG' or loglevel != 'TRACE' or not args.debug or not args.trace:
            restartinstnow(inst)
        else:
            log.log('WATCH', f'Instance [{inst.title()}] Debug mode stops start/restart...')
    else:
        log.warning(f'Server {hstname} is waiting for drives to mount')


@log.catch
def main():
    isrunning = {}
    isonline = {}
    for seat in instance:
        isrunning[seat['name']] = {}
        isrunning[seat['name']].update({'isit': 0, 'count': 0})
        isonline[seat['name']] = {}
        isonline[seat['name']].update({'isit': 0, 'count': 0})
    log.log('START', f'Watchdog Daemon is starting on [{hstname}] for [{instr.title()}]')
    if len(instance) > 0:
        if didserverjustboot():
            log.log('WATCH', 'server just booted, starting instances for the first time')
            while not issharedmounted():
                log.log('WATCH', 'Shared drive is not mounted, waiting for mount to complete...')
                sleep(60)
            if issharedmounted():
                for eat in instance:
                    serverexec(['arkmanager', 'start', f'@{eat["name"]}'], nice=-1, null=True)
                    sleep(120)
                log.debug('sleeping 15 min while instances start')
                log.sleep(Secs['10min'])
    log.debug('starting watchdog loop')
    serverstatcount = 0
    while True:
        try:
            if hstname.upper() != 'SVRDB':
                if serverstatcount == 5:
                    serverstatcount = 0
                serverstatcount += 1
                if serverstatcount == 1:
                    log.debug(f'Updating server stats for server {hstname.upper()}')
                    memfree, memavail, swapused = getservermem()
                    cpucores, cpufreq, cpuload1, cpuload5, cpuload15 = getcpustats()
                    uptime = getserveruptime()

            for eachinst in instance:
                if isinstanceenabled(eachinst['name']):
                    isitrunning, isitlistening, isitonline = getinststatus(eachinst['name'])
                    if isitrunning:
                        log.debug(f'{eachinst["name"]} passed instance running check')
                        setarknice(eachinst["name"])
                        try:
                            log.debug(f'updating process stats for {eachinst["name"]}')
                            arkservercpu = float_trunc_1dec(arkprocesscpu(eachinst["name"]))
                            actmem, totmem = getinstmem(eachinst['name'])
                            dbupdate("UPDATE instances SET actmem = '%s', totmem = '%s', arkcpu = '%s' WHERE name = '%s'" % (actmem, totmem, arkservercpu, eachinst['name']))
                        except:
                            log.log('WATCH', f'Failed to get ark process info for [{eachinst["name"]}]')
                        for neach in isrunning.copy():
                            if neach == eachinst['name']:
                                isrunning[neach].update({'isit': 1, 'count': 0})
                    elif Now() - int(getlaststart(eachinst['name'])[0]) > Secs['3min']:
                        for neach in isrunning.copy():
                            if neach == eachinst['name']:
                                isrunning[neach].update({'isit': 0, 'count': isrunning[neach]['count'] + 1})
                                if isrunning[neach]['count'] > 2:
                                    log.warning(f'[{eachinst["name"].title()}] failed instance running check ({isrunning[neach]["count"]}/3)')
                                    dbupdate("UPDATE instances SET isup = 0 WHERE name = '%s'" % (eachinst['name'],))
                    else:
                        log.debug(f'skipping running check for 3 min startup for {eachinst["name"]}')

                    if isitrunning and not isitonline and Now() - int(getlaststart(eachinst['name'])[0]) > Secs['10min']:
                        for neach in isonline.copy():
                            if neach == eachinst['name']:
                                isonline[neach].update({'isit': 0, 'count': isonline[neach]['count'] + 1})
                                if isonline[neach]['count'] > 5:
                                    log.warning(f'[{eachinst["name"].title()}] failed instance online check ({isonline[neach]["count"]}/10)')
                                    dbupdate("UPDATE instances SET isup = 0 WHERE name = '%s'" % (eachinst['name'],))

                    elif isitonline:
                        log.debug(f'{eachinst["name"]} passed instance online check')
                        dbupdate("UPDATE instances SET uptimestamp = '%s', isup = 1 WHERE name = '%s'" % (Now(), eachinst['name']))
                        for neach in isonline.copy():
                            if neach == eachinst['name']:
                                isonline[neach].update({'isit': 1, 'count': 0})
                    else:
                        log.debug(f'skipping online check for 10 min startup for {eachinst["name"]}')

                    for feach in isrunning:
                        if feach == eachinst['name']:
                            if isrunning[feach]['count'] == 5:
                                isrunning[feach].update({'isit': 0, 'count': 0})
                                isonline[feach].update({'isit': 0, 'count': 0})
                                log.warning(f'Instance [{eachinst["name"]}] failed running checks! Starting Instance')
                                pmsg = f'Instance {eachinst["name"]} failed running checks!\nStarting Instance'
                                pushover('Watchdog', pmsg)
                                startserver(eachinst['name'], restart=False)
                    for feach in isonline:
                        if feach == eachinst['name']:
                            if isonline[feach]['count'] == 10:
                                oplayers = getliveplayersonline({eachinst["name"]})
                                isrunning[feach].update({'isit': 0, 'count': 0})
                                isonline[feach].update({'isit': 0, 'count': 0})
                                if int(oplayers[0]) == 0 and int(oplayers[1]) == 0:
                                    log.warning(f'Instance [{eachinst["name"]}] failed online checks! Restarting Instance')
                                    pmsg = f'Instance {eachinst["name"]} failed online checks!\nRestarting Instance'
                                    pushover('Watchdog', pmsg)
                                    startserver(eachinst['name'], 'online')
                                else:
                                    log.info(f'Skipping instance restart because players are actually online')
                    if serverstatcount == 1:
                        dbupdate("UPDATE instances SET serverhost = '%s', svrmemfree = '%s', svrmemavail = '%s', svrswapused = '%s', cpucores = '%s', cpufreq = '%s', cpuload1 = '%s', cpuload5 = '%s', cpuload15 = '%s', serveruptime = '%s' WHERE name = '%s'" % (hstname, int(memfree), int(memavail), int(swapused), int(cpucores), cpufreq, cpuload1, cpuload5, cpuload15, uptime, eachinst['name']))

        except KeyboardInterrupt:
            log.critical('Keyboard Interrupt Detected, Exiting.')
            exit()
        except:
            log.exception('Critical Error in Ark Watchdog!')
        log.trace('sleeping 1 min between checks')
        try:
            sleep(Secs['1min'])
            checkpyark()
        except KeyboardInterrupt:
            log.critical('Keyboard Interrupt Detected, Exiting.')
            exit()


if __name__ == 'arkwatchdog':
    main()
