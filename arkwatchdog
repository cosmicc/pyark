#!/usr/bin/env python3

from modules.configreader import instance
from modules.dbhelper import dbupdate
from modules.pushover import pushover
from modules.instances import 
from sys import exit
from time import sleep
from modules.timehelper import Secs, Now, elapsedTime
import psutil
import argparse
import logging
import re
import os
import socket
import subprocess

__author__ = "Ian Perry"
__copyright__ = "Copyright 2018, Galaxy Media"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Ian Perry"
__email__ = "ianperry99@gmail.com"
__progname__ = "pyark-daemon"
__description__ = "ark instance watchdog service"
__detaildesc__ = ""

hstname = socket.gethostname()
log = logging.getLogger(name=hstname)

logfile2 = '/home/ark/shared/logs/arkwatchdog/arkwatchdog.log'

parser = argparse.ArgumentParser(prog=__progname__)
parser.add_argument('--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-q', '--quiet', action='store_true',
                    help='supress logging output to console. default: error logging')
parser.add_argument('--debug', action='store_true', help='verbose output (debug)')
args = parser.parse_args()
if args.debug:  # changed to false to force debugging
    log.setLevel(logging.DEBUG)
else:
    log.setLevel(logging.INFO)
console_format = logging.Formatter('%(asctime)s:[%(levelname)s]:%(name)s:%(message)s')
log_format = logging.Formatter('%(asctime)s:[%(levelname)s]:%(name)s:%(message)s')

if args.quiet is False:
    log_console = logging.StreamHandler()
    log.addHandler(log_console)
    log_console.setFormatter(console_format)
log_fileh = logging.FileHandler(logfile2)
log.addHandler(log_fileh)
log_fileh.setFormatter(log_format)


def issharedmounted():
    return os.path.ismount('/home/ark/shared')


def float_trunc_1dec(num):
    try:
        tnum = num // 0.1 / 10
    except:
        return False
    else:
        return tnum


def serverneedsrestart():
    if os.path.isfile('/var/run/reboot-required'):
        return True
    else:
        return False


def arkprocesscpu(inst):
    pidfile = f'/home/ark/ARK/ShooterGame/Saved/.arkserver-{inst}.pid'
    file = open(pidfile, 'r')
    arkpid = file.read()
    file.close()
    arkprocess = psutil.Process(int(arkpid))
    return arkprocess.cpu_percent(interval=2)


def getserveruptime():
    return elapsedTime(Now(), psutil.boot_time())


def getcpustats():
    rawcpuload = psutil.getloadavg()
    numcores = psutil.cpu_count()
    cpufreq = psutil.cpu_freq()[0] / 1000
    load1 = (rawcpuload[0] / numcores) * 100
    load5 = (rawcpuload[1] / numcores) * 100
    load15 = (rawcpuload[2] / numcores) * 100
    return numcores, float_trunc_1dec(cpufreq), float_trunc_1dec(load1), float_trunc_1dec(load5), float_trunc_1dec(load15)


def getservermem():
    process = subprocess.Popen(['free', '-m'], stdout=subprocess.PIPE)
    out, err = process.communicate()
    lines = []
    lines = out.decode().split('\n')
    memvalues = lines[1].strip().split()
    swapvalues = lines[2].strip().split()
    memfree = memvalues[3]
    memavailable = memvalues[6]
    swapused = swapvalues[2]
    return memfree, memavailable, swapused


def stripansi(stripstr):
    ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
    return(ansi_escape.sub('', stripstr))


def getinstpid(inst):
    rawpid = subprocess.run('arkmanager getpid @%s' % (inst), stdout=subprocess.PIPE,
                            stderr=subprocess.DEVNULL, shell=True)
    return rawpid.stdout.decode('utf-8').split('\n')[1]


def didserverjustboot():
    rawuptime = subprocess.run('tail /proc/uptime', stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
    rawup = rawuptime.stdout.decode('utf-8').split(' ')
    if float(rawup[0]) < Secs['3min']:
        return True
    else:
        return False


def getinstmem(inst):
    instpid = getinstpid(inst)
    rawsts = subprocess.run('ps -p %s -o rss,vsz' % (instpid), stdout=subprocess.PIPE,
                            stderr=subprocess.DEVNULL, shell=True)
    instrss, instvsz = rawsts.stdout.decode('utf-8').split('\n')[1].split(' ')
    instrss = int(instrss) / 1000000 // 0.01 / 100
    instvsz = int(instvsz) / 1000000 // 0.01 / 100
    return instrss, instvsz


def getrunning(inst):
    rawrun = subprocess.run('arkmanager status @%s' % (inst), stdout=subprocess.PIPE,
                            stderr=subprocess.DEVNULL, shell=True)
    rawrun2 = rawrun.stdout.decode('utf-8').split('\n')
    players = 0
    activeplayers = 0
    for ea in rawrun2:
        sttitle = stripansi(ea.split(':')[0]).strip()
        if (sttitle == 'Server running'):
            if (stripansi(ea.split(':')[1]).strip() == 'Yes'):
                srunning = True
            elif (stripansi(ea.split(':')[1]).strip() == 'No'):
                srunning = False
                sonline = False
        if (sttitle == 'Server listening'):
            if (stripansi(ea.split(':')[1]).strip() == 'Yes'):
                slistening = True
            elif (stripansi(ea.split(':')[1]).strip() == 'No'):
                slistening = False
                sonline = False
        if (sttitle == 'Server online'):
            if (stripansi(ea.split(':')[1]).strip() == 'Yes'):
                sonline = True
            elif (stripansi(ea.split(':')[1]).strip() == 'No'):
                sonline = False
        if (sttitle == 'Players'):
            players = int(stripansi(ea.split(':')[1]).strip().split('/')[0].strip())
        if (sttitle == 'Active Players'):
            activeplayers = int(stripansi(ea.split(':')[1]).strip())
        if (sttitle == 'Server build ID'):
            serverbuild = stripansi(ea.split(':')[1]).strip()
        if (sttitle == 'Server version'):
            serverversion = stripansi(ea.split(':')[1]).strip()
        if (sttitle == 'ARKServers link'):
            arkserverslink = stripansi(ea.split('  ')[1]).strip()
        if (sttitle == 'Steam connect link'):
            steamlink = stripansi(ea.split('  ')[1]).strip()

    return (srunning, slistening, sonline, serverbuild, serverversion, steamlink, arkserverslink, players, activeplayers)


def restartserver(inst, reason):
    if issharedmounted():
        log.warning(f'restarting instance {inst}')
        pmsg = f'Instance {inst} failed {reason} checks!\nRestarting Instance'
        pushover('Watchdog', pmsg)
        subprocess.run('arkmanager start @%s' % (inst), stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    else:
        log.warning(f'Server {hstname} is waiting for drives to mount')


def main():
    isrunning = {}
    islistening = {}
    isonline = {}
    for seat in instance:
        isrunning[seat['name']] = {}
        isrunning[seat['name']].update({'isit': 0, 'count': 0})
        islistening[seat['name']] = {}
        islistening[seat['name']].update({'isit': 0, 'count': 0})
        isonline[seat['name']] = {}
        isonline[seat['name']].update({'isit': 0, 'count': 0})
    log.info(f'>>> ark instance watchdog daemon is starting on {hstname}')
    if didserverjustboot():
        log.info('server just booted, starting instances for the first time')
        if issharedmounted():
            for eat in instance:
                log.info(f'starting instance {eat["name"]}')
                subprocess.run('arkmanager start @%s' % (eat['name']), stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            log.debug('sleeping 15 min while instances start')
            log.sleep(Secs['15min'])
        log.debug('starting watchdog loop')
    while True:
        actmem = 0
        totmem = 0
        try:
            for eachinst in instance:
                isitrunning, isitlistening, isitonline, arkbuild, arkversion, steamlink, arkserverslink, players, activeplayers = getrunning(eachinst['name'])
                if not isitrunning:
                    for neach in isrunning.copy():
                        if neach == eachinst['name']:
                            isrunning[neach].update({'isit': 0, 'count': isrunning[neach]['count'] + 1})
                            isrunningint = 0
                            log.warning(f'{eachinst["name"]} failed instance running check {isrunning[neach]["count"] + 1}/2')
                else:
                    for neach in isrunning.copy():
                        if neach == eachinst['name']:
                            isrunning[neach].update({'isit': 1, 'count': 0})
                            isrunningint = 1
                            arkservercpu = arkprocesscpu(neach)
                            log.debug(f'{eachinst["name"]} passed instance running check')
                    arkservercpu = float_trunc_1dec(arkprocesscpu(eachinst['name']))
                    actmem, totmem = getinstmem(eachinst['name'])
                    memfree, memavail, swapused = getservermem()
                    cpucores, cpufreq, cpuload1, cpuload5, cpuload15 = getcpustats()
                    uptime = getserveruptime()

                if not isitlistening:
                    for neach in islistening.copy():
                        if neach == eachinst['name']:
                            islistening[neach].update({'isit': 0, 'count': islistening[neach]['count'] + 1})
                            islisteningint = 0
                            log.warning(f'{eachinst["name"]} failed instance listening check {islistening[neach]["count"] + 1}/5')
                else:
                    for neach in islistening.copy():
                        if neach == eachinst['name']:
                            islistening[neach].update({'isit': 1, 'count': 0})
                            islisteningint = 1
                            log.debug(f'{eachinst["name"]} passed instance listening check')

                if not isitonline:
                    for neach in isonline.copy():
                        if neach == eachinst['name']:
                            isonline[neach].update({'isit': 0, 'count': isonline[neach]['count'] + 1})
                            isonlineint = 0
                            log.warning(f'{eachinst["name"]} failed instance online check {isonline[neach]["count"] + 1}/5')
                else:
                    for neach in isonline.copy():
                        if neach == eachinst['name']:
                            isonline[neach].update({'isit': 1, 'count': 0})
                            isonlineint = 1
                            log.debug(f'{eachinst["name"]} passed instance online check')

                # log.debug(isonlineint, islisteningint, isrunningint, time.time(), actmem, totmem, eachinst['name'])
                try:
                    dbupdate("UPDATE instances SET isup = '%s', islistening = '%s', isrunning = '%s', arkbuild = '%s', arkversion = '%s', steamlink = '%s', arkserverslink = '%s', uptimestamp = '%s', actmem = '%s', totmem = '%s', serverhost = '%s', svrmemfree = '%s', svrmemavail = '%s', svrswapused = '%s', cpucores = '%s', cpufreq = '%s', cpuload1 = '%s', cpuload5 = '%s', cpuload15 = '%s', serveruptime = '%s', arkcpu = '%s', restartserver = '%s', connectingplayers = '%s', activeplayers = '%s' WHERE name = '%s'" % (isonlineint, islisteningint, isrunningint, int(arkbuild), arkversion, steamlink, arkserverslink, Now(), actmem, totmem, hstname, int(memfree), int(memavail), int(swapused), int(cpucores), cpufreq, cpuload1, cpuload5, cpuload15, uptime, arkservercpu, serverneedsrestart(), int(players), int(activeplayers), eachinst['name']))
                except:
                    log.error('Error writing stats to database')
                for feach in isrunning:
                    if feach == eachinst['name']:
                        if isrunning[feach]['count'] == 2:
                            isrunning[feach].update({'isit': 0, 'count': 0})
                            islistening[feach].update({'isit': 0, 'count': 0})
                            isonline[feach].update({'isit': 0, 'count': 0})
                            restartserver(eachinst['name'], 'running')
                for feach in islistening:
                    if feach == eachinst['name']:
                        if islistening[feach]['count'] == 10:
                            isrunning[feach].update({'isit': 0, 'count': 0})
                            islistening[feach].update({'isit': 0, 'count': 0})
                            isonline[feach].update({'isit': 0, 'count': 0})
                            restartserver(eachinst['name'], 'listening')
                for feach in isonline:
                    if feach == eachinst['name']:
                        if isonline[feach]['count'] == 10:
                            isrunning[feach].update({'isit': 0, 'count': 0})
                            islistening[feach].update({'isit': 0, 'count': 0})
                            isonline[feach].update({'isit': 0, 'count': 0})
                            restartserver(eachinst['name'], 'online')

        except KeyboardInterrupt:
            log.critical('Keyboard Interrupt Detected, Exiting.')
            exit()
        except:
            log.critical('Critical Error in Ark Watchdog!', exc_info=True)
        log.debug('sleeping 2 min between checks')
        try:
            sleep(Secs['2min'])
        except KeyboardInterrupt:
            log.critical('Keyboard Interrupt Detected, Exiting.')
            exit()


if __name__ == '__main__':
    main()
