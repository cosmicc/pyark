#!/usr/bin/env python3.7

import argparse
import json
import logging
import subprocess
import time
from datetime import datetime
from os import system
from sys import exit
from urllib.request import Request, urlopen

from numpy import mean
from sh import tail

from modules.colorizer import (BCYN, BGN, BGRN, BLU, BMGT, BRED, BWHT, BYEL, GRN, LREV,
                               MAU, MGT, ORG, PUR, RED, RMY, RST, SKN, SLT, WHT, YEL)
from modules.configreader import sharedpath
from modules.dbhelper import db_getall, db_getcolumns, db_gettables, db_getvalue, dbquery, dbupdate
from modules.timehelper import Now, Secs, datetimeto, elapsedTime, estshift, gmtshift, playedTime, wcstamp

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('action_to_perform',
                    action='store', choices=['cluster', 'players', 'delplayer', 'startevent', 'start', 'stop', 'restart',
                                             'linkplayer', 'startlottery', 'lottery', 'restartserver',
                                             'listtables', 'notlinked', 'newest', 'server', 'dinowipe',
                                             'logwatch', 'lotterytables', 'log', 'topplayers', 'test',
                                             'debugwatch', 'showtable', 'oldest', 'logsearch', 'banplayer', 'banlist',
                                             'unbanplayer', 'tribewipe', 'backupdb', 'shortest', 'killall'], help='Action to perform')
action_group = parser.add_argument_group(title='actions')
action_group.add_argument('start', action='store_true', help='Start the pyark daemon Systemctl')
action_group.add_argument('stop', action='store_true', help='Stop the pyark daemon Systemctl')
action_group.add_argument('restart', action='store_true', help='Restart the pyark daemon Systemctl')
action_group.add_argument('cluster', action='store_true', help='Cluster information')
action_group.add_argument('showtable', action='store_true', help='Show players table')
action_group.add_argument('listtables', action='store_true', help='List tables in database')
action_group.add_argument('restartserver', action='store_true', help='Set a server for admin restart')
action_group.add_argument('delplayer', action='store_true', help='Remove a player from the table')
action_group.add_argument('linkplayer', action='store_true', help='Link a player to a discord user')
action_group.add_argument('notlinked', action='store_true', help='Show players not linked to discord')
action_group.add_argument('newest', action='store_true', help='Show 10 newest players joined')
action_group.add_argument('oldest', action='store_true', help='Show 10 oldest players lastseen')
action_group.add_argument('shortest', action='store_true', help='Show 10 shortest players play times')
action_group.add_argument('server', action='store_true', help='Server information')
action_group.add_argument('players', action='store_true', help='Show players by last time seen')
action_group.add_argument('dinowipe', action='store_true', help='Initiate a wild dino wipe on a server')
action_group.add_argument('logwatch', action='store_true', help='Log Watcher')
action_group.add_argument('debugwatch', action='store_true', help='Debug Log Watcher')
action_group.add_argument('logsearch', action='store_true', help='Seach log by string (with -l)')
action_group.add_argument('banplayer', action='store_true', help='Ban a player from the cluster')
action_group.add_argument('unban', action='store_true', help='UN-Ban a player from the cluster')
action_group.add_argument('banlist', action='store_true', help='Show the list of banned players')
action_group.add_argument('tribewipe', action='store_true', help='Wipe a tribe, its dinos and belongings from a server')
action_group.add_argument('backupdb', action='store_true', help='Run a manual pyark database backup')
action_group.add_argument('lotterytables', action='store_true', help='Show Lottery tables')
action_group.add_argument('startlottery', action='store_true', help='Start a lottery')
action_group.add_argument('startevent', action='store_true', help='Start an Event')
action_group.add_argument('lottery', action='store_true', help='Show Lottery Info')
action_group.add_argument('topplayers', action='store_true', help='Show Top Players')
action_group.add_argument('log', action='store_true', help='Show the log (requires log length)')
action_group.add_argument('killall', action='store_true', help='Kill all pyark processes')
action_group.add_argument('test', action='store_true', help='TESTING AVG')

parser.add_argument('-s', '--servername', action='store', help='Ark server instance name')
parser.add_argument('-t', '--tablename', action='store', help='Database Table name')
parser.add_argument('-d', '--dbname', action='store', help='Database name')
parser.add_argument('-c', '--cancel', action='store_true', help='Cancel a instance restart')
parser.add_argument('-l', '--searcharg', action='store', help='Search string for log file searching')
parser.add_argument('-j', '--loglines', action='store', help='Number of log lines to show')

args = parser.parse_args()

log = logging.getLogger()
log.setLevel(logging.INFO)
console_format = logging.Formatter('%(asctime)s:[%(levelname)s]:%(message)s')
log_console = logging.StreamHandler()
log.addHandler(log_console)
log_console.setFormatter(console_format)

configfile = '/home/ark/pyark.cfg'

statinst = ['ragnarok', 'island', 'volcano', 'extinction']

clr1 = f'{BYEL}'
clr2 = f'{BCYN}'

tclr = ''
trclr = ''

print('    ')

null = None


jsontest = """{"text": "\u001b[38;5;201m2019-07-27 09:01:34.674\u001b[0m | \u001b[38;5;201m SVR3\u001b[0m | \u001b[38;5;201mJOIN   \u001b[0m | \u001b[38;5;201mPlayer [Uglysammy] has transferred from [Ragnarok] to [Valguero]        \u001b[0m | \u001b[38;5;109monlinemonitor:playergreet:158\u001b[0m\n", "record": {"elapsed": {"repr": "14:54:27.711542", "seconds": 53667.711542}, "exception": null, "extra": {"hostname": "SVR3", "instance": "MAIN"}, "file": {"name": "onlinemonitor.py", "path": "/home/ark/pyark/onlinemonitor.py"}, "function": "playergreet", "level": {"icon": "\u00a4", "name": "JOIN", "no": 21}, "line": 158, "message": "Player [Uglysammy] has transferred from [Ragnarok] to [Valguero]", "module": "onlinemonitor", "name": "onlinemonitor", "process": {"id": 1749, "name": "MainProcess"}, "thread": {"id": 140505023248128, "name": "greet-76561198109504766"}, "time": {"repr": "2019-07-27 09:01:34.674965+00:00", "timestamp": 1564218094.674965}}}"""

def processlogline(line):
    try:
        #if not line.startswith('^@'):
            line = line.strip('\x00')
            data = json.loads(line.strip(), strict=False)
            if data["record"]["level"]["name"] != "START" or data["record"]["level"]["name"] != "EXIT":
                print(f'{data["text"].strip()}')
    except json.decoder.JSONDecodeError:
        print(f'{repr(line)}')


def watchlog(dlog):
    if dlog is False:
        logpath = f'/home/ark/shared/logs/pyark/pyarklog.json'
    elif dlog is True:
        logpath = f'/home/ark/shared/logs/pyark/debuglog.json'

    logproc = tail("-f", logpath, _out=processlogline)
    #while True:
    #    sleep(10)
    #    print('##############')
    #    logproc.wait()


def killall():
    with open('/tmp/pyark.pid') as inf:
        for line in inf:
            system(f'kill -9 {line}')
    print('All pyark processes killed.')


def percentage(part, whole):
    return 100 * float(part) / float(whole)


def f2dec(num):
    try:
        tnum = num // 0.01 / 100
    except:
        log.exception('Error truncating float to 2 decimals: {}'.format(num))
        return False
    else:
        return tnum


def getallavg(length):
    if length == 'daily':
        ilength = Secs['day']
    elif length == 'weekly':
        ilength = Secs['week']
    elif length == 'monthly':
        ilength = Secs['month']
    elif length == 'hourly':
        ilength = Secs['hour']
    elif length == 'eighthour':
        ilength = Secs['8hour']
    avglist = []
    ntime = int(time.time())
    for each in statinst:
        slist = []
        navglist = []
        nlist = dbquery("SELECT value FROM %s WHERE date > '%s'" % (each, ntime - ilength), db='statsdb')
        for y in nlist:
            slist.append(y[0])
        if avglist == []:
            avglist = slist
        else:
            navglist = [sum(pair) for pair in zip(slist, avglist)]
            avglist = navglist
    return mean(avglist)


def getallhighest(length):
    if length == 'daily':
        ilength = 86400
    elif length == 'weekly':
        ilength = 604800
    elif length == 'monthly':
        ilength = 2592000
    elif length == 'hourly':
        ilength = 3600
    elif length == 'eighthour':
        ilength = 28800
    avglist = []
    ntime = int(time.time())
    for each in statinst:
        slist = []
        navglist = []
        dlist = []
        datelist = []
        nlist = dbquery("SELECT value, date FROM %s WHERE date > '%s'" % (each, ntime - ilength), db='statsdb')
        for y, x in nlist:
            slist.append(y)
            dlist.append(x)
        if avglist == []:
            avglist = slist
            datelist = dlist
        else:
            navglist = [sum(pair) for pair in zip(slist, avglist)]
            avglist = navglist
            datelist = dlist
    nt = datetime.fromtimestamp(datelist[avglist.index(max(avglist))])
    return max(avglist), estshift(nt).strftime('%a %b %-d %-I:%M %p')


def getaverage(inst, length):
    if length == 'daily':
        ilength = 86400
    elif length == 'weekly':
        ilength = 604800
    elif length == 'monthly':
        ilength = 2592000
    elif length == 'hourly':
        ilength = 3600
    elif length == 'eighthour':
        ilength = 28800
    avglist = []
    ntime = int(time.time())
    slist = dbquery("SELECT value FROM %s WHERE date > '%s'" % (inst, ntime - ilength), db='statsdb')
    for te in slist:
        avglist.append(te[0])
    return f2dec(mean(avglist))


def getplaytime(inst, length):
    if length == 'daily':
        ilength = 86400
    elif length == 'weekly':
        ilength = 604800
    elif length == 'monthly':
        ilength = 2592000
    elif length == 'hourly':
        ilength = 3600
    elif length == 'eighthour':
        ilength = 28800
    ptime = 0
    ntime = int(time.time())
    slist = dbquery("SELECT value FROM %s WHERE date > '%s'" % (inst, ntime - ilength), db='statsdb')
    for te in slist:
        ptime = ptime + (te[0] * (5 * 60))
    return ptime


def gethighest(inst, length):
    if length == 'daily':
        ilength = 86400
    elif length == 'weekly':
        ilength = 604800
    elif length == 'monthly':
        ilength = 2592000
    elif length == 'hourly':
        ilength = 3600
    elif length == 'eighthour':
        ilength = 28800

    ntime = int(time.time())
    slist = dbquery("SELECT date, MAX(value) FROM %s WHERE date > '%s' GROUP BY DATE ORDER BY date ASC" % (inst, ntime - ilength), db='statsdb', fetch='one')
    htime = datetime.fromtimestamp(slist[0])
    return slist[1], estshift(htime).strftime('%a %b %-d %-I:%M %p')


def fetcharkserverdata(key):
    url = f'https://ark-servers.net/api/?object=servers&element=detail&key={key}'
    req = Request(url, headers={'User-Agent': 'Mozilla/5.0'})
    html = urlopen(req).read()
    adata = json.loads(html)
    return adata


def sctl(scmd):
    if scmd == 'start':
        command = '/bin/systemctl start pyark'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        command = '/bin/systemctl start arkwatchdog'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        print('PyArk Started')
    elif scmd == 'stop':
        command = '/bin/systemctl stop arkwatchdog'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        command = '/bin/systemctl stop pyark'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        print('Stopping PyArk Daemon')
    elif scmd == 'restart':
        command = '/bin/systemctl restart pyark'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        print('Restarting PyArk Daemon')


def printplayer(feach):
    print(f'{SKN}{feach[0]} {BMGT}{feach[1].title()}{RST} {WHT}last on {tclr}{elapsedTime(Now(),float(feach[2]))} \
{WHT}ago on {RMY}{feach[3].capitalize()} {WHT}Home Server: {SLT}{feach[15].capitalize()} {WHT}Discord: \
{SKN}{feach[8]}{RST}')
    print(f'{WHT}Connections: {BGRN}{feach[7]} {WHT}Total Playtime: {BCYN}{playedTime(feach[4])} {WHT}joined \
{trclr}{elapsedTime(Now(),float(feach[6]))}{WHT} ago{RST}')
    print(f'{WHT}Points: {BGRN}{feach[5]} {WHT}Transfer Points: {BGRN}{feach[16]} {WHT}Auctions: {BGRN}{feach[10]} \
({feach[11]}/{feach[12]}) {WHT}Primordial Warning: {BCYN}{feach[14]} {WHT}Lotto Wins: {BGRN}{feach[18]}{RST}\n')


def alogsearcher(searchparm):
    log_file_path = '/home/ark/shared/logs/pyark/pyark.log'
    print(f'{BMGT}log {RST}')
    print('   ')
    with open(log_file_path, "r") as in_file:
        for line in in_file:
            if (line.find(searchparm)) != -1:
                # if jk = 0: ################
                print(f'{line}{RST}', end='', flush=True)
    print('   ')
    print(f'{BGRN}Complete.{RST}')


def printarkserverdata(sdata):
    if int(sdata['is_online']) == 1:
        fug = f'{BGRN}True{RST}'
    else:
        fug = f'{BRED}False{RST}'
    print(f'{BYEL}Hostname: {BMGT}{sdata["hostname"]}{RST}')
    print(f'{BYEL}Ark Server Name: {BCYN}{sdata["name"]}{RST}')
    print(f'{BYEL}Address: {BMGT}{sdata["address"]}{RST}  {BYEL}Port: {BMGT}{sdata["port"]}{BYEL}  Query Port: \
{BMGT}{sdata["query_port"]}{BYEL}  Map: {BMGT}{sdata["map"]}{RST}')
    print(f'{BYEL}Server Version: {BMGT}{sdata["version"]}{BYEL}  Online: {fug}{BYEL}  Uptime: {BMGT}{sdata["uptime"]}{BYEL}')
    print(f'{BYEL}Rank: {BCYN}{sdata["rank"]}{BYEL}  Score: {BCYN}{sdata["score"]}{BYEL}  Votes: \
{BCYN}{sdata["votes"]}{BYEL}  Favorited: {BCYN}{sdata["favorited"]}{BYEL}  Comments: {BCYN}{sdata["comments"]}{RST}')
    print(f'{BYEL}Ark-Servers URL: {BMGT}{sdata["url"]}{RST}')
    print(f'{BYEL}Last Update: {BCYN}{sdata["last_check"]}{RST}')
    print(f'{BYEL}Last Online: {BCYN}{sdata["last_online"]}{RST}')
    print('  ')


def printserverinfo(each):
    allplayers = db_getall("players")
    gencfgver = db_getvalue("cfgver", "general")

    def howmanyon(inst):
        pcnt = 0
        for row in allplayers:
            # print(row)
            diff_time = Now() - float(row[2])
            total_min = diff_time / 60
            minutes = int(total_min % 60)
            hours = int(total_min / 60)
            days = int(hours / 24)
            if minutes <= 1 and hours < 1 and days < 1 and row[3] == inst:
                pcnt += 1
        return pcnt
    restarted = elapsedTime(Now(), float(each[1]))
    if Now() - float(each[1]) > 259200:
        restclr = f"{BRED}"
    elif Now() - float(each[1]) > 172800:
        restclr = f"{BYEL}"
    else:
        restclr = f"{BGRN}"
    lwipe = elapsedTime(Now(), float(each[2]))
    if Now() - float(each[2]) > 86400:
        wipeclr = f"{BRED}"
    elif Now() - float(each[2]) > 43200:
        wipeclr = f"{BYEL}"
    else:
        wipeclr = f"{BGRN}"
    lvote = elapsedTime(Now(), float(each[4]))
    if Now() - float(each[4]) > 259200:
        voteclr = f"{BRED}"
    elif Now() - float(each[4]) > 86400:
        voteclr = f"{BYEL}"
    else:
        voteclr = f"{BGRN}"
    ply = howmanyon(each[0])
    if gencfgver[0] != each[6]:
        vertxt = f'{BRED}({int(gencfgver[0]) - int(each[6])} versions behind){RST}'
    else:
        vertxt = f'{GRN}(Current){RST}'
    if each[3] == "False":
        inrest = f"{GRN}False{RST}"
    else:
        inrest = f"{BRED}TRUE{RST}"
    if ply != 0:
        mm = BGRN
    else:
        mm = BRED
    if each[7] < 5:
        nn = BRED
    elif each[7] < 15:
        nn = YEL
    else:
        nn = BGRN
    if each[3] == "True":
        tls = f'Time Left: {nn}{each[7]} Minutes'
    else:
        tls = ''
    if int(each[9]) == 0:
        iso = f'{BRED}NO{RST}'
    elif int(each[9]) == 1:
        iso = f'{BGRN}Yes{RST}'
    if int(each[10]) == 0:
        isl = f'{BRED}NO{RST}'
    elif int(each[10]) == 1:
        isl = f'{BGRN}Yes{RST}'
    if int(each[11]) == 0:
        isr = f'{BRED}NO{RST}'
    elif int(each[11]) == 1:
        isr = f'{BGRN}Yes{RST}'
    if time.time() - float(each[12]) > 600:
        boo = f'{BRED}'
    else:
        boo = f'{BGRN}'
    lastuc = elapsedTime(time.time(), float(each[12]))
    thv, thd = gethighest(each[0], 'daily')
    whv, whd = gethighest(each[0], 'weekly')
    mhv, mhd = gethighest(each[0], 'monthly')
    hhv, hhd = gethighest(each[0], 'hourly')
    ehv, ehd = gethighest(each[0], 'eighthour')

    svrifo = dbquery("SELECT * from instances WHERE name = '%s'" % (each[0],), fetch='one')
    sdata = fetcharkserverdata(svrifo[8])
    if int(sdata['is_online']) == 1:
        fug = f'{BGRN}True{RST}'
    else:
        fug = f'{BRED}False{RST}'
    print(f'{BLU}--------------[{ORG}{each[0].upper()}{BLU}]--------------[{ORG}{each[0].upper()}{BLU}]---------------[{ORG}{each[0].upper()}{BLU}]---------------{RST}')
    print(f'{WHT}Hostname: {SKN}{sdata["hostname"]}{RST}')
    print(f'{WHT}Server: {BMGT}{each[0].upper()}{WHT}  Players: {mm}{ply}/50 {WHT} Online: {fug}  {WHT}Uptime: {BGRN}{sdata["uptime"]}%  {WHT}Rank: {BCYN}{sdata["rank"]}{RST}')
    print(f'{WHT}Online: {iso}  {WHT}Listening: {isl}  {WHT}Running: {isr}  {WHT}Last Check: {boo}{lastuc}{RST}')
    print(f'{WHT}Active Memory: {SKN}{each[13]} Gig{WHT}  Total Memory: {SKN}{each[14]} Gig{RST}')
    print(f'{WHT}Configuration version: {BCYN}{each[6]}{RST} {vertxt}  {WHT}Server in restart: {inrest} {WHT}{tls}{RST}')
    print(f'{WHT}Last restart: {restclr}{restarted}{WHT}  Reason: {BCYN}{each[5]}{RST}')
    print(f'{WHT}Last wipe: {wipeclr}{lwipe} {WHT}- Last wipe vote: {voteclr}{lvote}{RST}')
    if int(percentage(getplaytime(each[0], 'hourly'), 3600)) == 0:
        print(f"{WHT}Last Hour Avg: {BCYN}{getaverage(each[0], 'hourly')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'hourly'),3600))}% {WHT}- {BCYN}None {WHT}High: {BMGT}{hhv} {WHT}Players at {BYEL}{hhd}{RST}")
    else:
        print(f"{WHT}Last Hour Avg: {BCYN}{getaverage(each[0], 'hourly')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'hourly'),3600))}% {WHT}- {BCYN}{playedTime(str(getplaytime(each[0], 'hourly')))} {WHT}High: {BMGT}{hhv} {WHT}Players at {BYEL}{hhd}{RST}")
    if int(percentage(getplaytime(each[0], 'eighthour'), 28800)) == 0:
        print(f"{WHT}Last 8 Hour Avg: {BCYN}{getaverage(each[0], 'eighthour')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'eighthour'),28800))}% {WHT}- {BCYN}None {WHT}High: {BMGT}{ehv} {WHT}Players at {BYEL}{ehd}{RST}")
    else:
        print(f"{WHT}Last 8 Hour Avg: {BCYN}{getaverage(each[0], 'eighthour')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'eighthour'),28800))}% {WHT}- {BCYN}{playedTime(str(getplaytime(each[0], 'eighthour')))}  {WHT}High: {BMGT}{ehv} {WHT}Players at {BYEL}{ehd}{RST}")
    if int(percentage(getplaytime(each[0], 'daily'), 86400)) == 0:
        print(f"{WHT}Last 24 Hour Avg: {BCYN}{getaverage(each[0], 'daily')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'daily'),86400))}% {WHT}- {BCYN}None {WHT}High: {BMGT}{thv} {WHT}Players at {BYEL}{thd}{RST}")
    else:
        print(f"{WHT}Last 24 Hour Avg: {BCYN}{getaverage(each[0], 'daily')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'daily'),86400))}% {WHT}- {BCYN}{playedTime(str(getplaytime(each[0], 'daily')))}  {WHT}High: {BMGT}{thv} {WHT}Players at {BYEL}{thd}{RST}")
    if int(percentage(getplaytime(each[0], 'weekly'), 604800)) == 0:
        print(f"{WHT}Last Week Avg: {BCYN}{getaverage(each[0], 'weekly')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'weekly'),604800))}% {WHT}- {BCYN}None {WHT}High: {BMGT}{whv} {WHT}Players at {BYEL}{whd}{RST}")
    else:
        print(f"{WHT}Last Week Avg: {BCYN}{getaverage(each[0], 'weekly')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'weekly'),604800))}% {WHT}- {BCYN}{playedTime (str(getplaytime(each[0], 'weekly')))} {WHT}High: {BMGT}{whv} {WHT}Players at {BYEL}{whd}{RST}")
    if int(percentage(getplaytime(each[0], 'monthly'), 2592000)) == 0:
        print(f"{WHT}This Month Avg: {BCYN}{getaverage(each[0], 'monthly')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'monthly'),2592000))}% {WHT}- {BCYN}None {WHT}High: {BMGT}{mhv} {WHT}Players at {BYEL}{mhd}{RST}")
    else:
        print(f"{WHT}This Month Avg: {BCYN}{getaverage(each[0], 'monthly')} {WHT}Playtime: {BMGT}{int(percentage(getplaytime(each[0], 'monthly'),2592000))}% {WHT}- {BCYN}{playedTime(str(getplaytime(each[0], 'monthly')))} {WHT}High: {BMGT}{mhv} {WHT}Players at {BYEL}{mhd}{RST}")
    print(f'{BLU}-------------------------------------------------------------------------------------{RST}')
    print('  ')


def playersraw():
    allplayers = db_getall("players")
    for row in allplayers:
        pltime = playedTime(float(row[4].replace(',', '')))
        laston = elapsedTime(Now(), float(row[2]))
        diff_time = Now() - float(row[2])
        total_min = diff_time / 60
        minutes = int(total_min % 60)
        hours = int(total_min / 60)
        days = int(hours / 24)
        if minutes <= 1 and hours < 1 and days < 1:
            active = BGRN
        elif days > 7 <= 14:
            active = YEL
        elif days > 14:
            active = BRED
        else:
            active = BCYN
        firston = datetime.fromtimestamp(float(row[6]) - 14400).strftime('%a, %b %d %I:%M%p')
        print(f'{active}{row[0]} \"{row[1]}\" - Connections: {row[7]} - Reward Points: {row[5]}')
        print(f' FirstON: {firston} | PlayedTime: {pltime} | LastON: {laston} on {row[3]}{RST}')
        print('  ')


def showservers():
    global tclr
    global trclr
    allservers = db_getall("instances")
    for each in allservers:
        printserverinfo(each)
    lst = time.time() - 41
    lastones = dbquery("SELECT * from players WHERE lastseen > '%s'" % (lst, ))
    jo = len(lastones)
    if jo == 0:
        moo = f'{BRED}'
    else:
        moo = f'{BGRN}'
    print(f'{BLU}-------------------------------------[{ORG}NEW PLAYERS{BLU}]-------------------------------------{RST}')
    newbs = dbquery("SELECT * from players WHERE firstseen > '%s' ORDER BY firstseen DESC" % (Now() - 86400,))
    newbcnt = 0
    for peach in newbs:
        newbcnt += 1
    pmsg = f'{WHT}New Cluster Players Today: {BYEL}{newbcnt}{RST}  '
    newbs = dbquery("SELECT * from players WHERE firstseen > '%s' ORDER BY firstseen DESC" % (Now() - 604800,))
    newbcnt = 0
    for peach in newbs:
        newbcnt += 1
    pmsg = pmsg + f'{WHT}Last Week: {BYEL}{newbcnt}{RST}  '
    newbs = dbquery("SELECT * from players WHERE firstseen > '%s' ORDER BY firstseen DESC" % (time.time() - 2592000,))
    newbcnt = 0
    for peach in newbs:
        newbcnt += 1
    ahv, ahd = getallhighest("hourly")
    aev, aed = getallhighest("eighthour")
    adv, add = getallhighest("daily")
    awv, awd = getallhighest("weekly")
    amv, amd = getallhighest("monthly")
    y1 = f2dec(jo - getallavg("hourly"))
    if y1 > 0:
        uoo = f'{BGRN}'
    else:
        uoo = f'{BRED}'
    y2 = f2dec(jo - getallavg("eighthour"))
    if y2 > 0:
        uoo2 = f'{BGRN}'
    else:
        uoo2 = f'{BRED}'
    y3 = f2dec(jo - getallavg("daily"))
    if y3 > 0:
        uoo3 = f'{BGRN}'
    else:
        uoo3 = f'{BRED}'
    print(f'{pmsg}{WHT}Last Month: {BYEL}{newbcnt}{RST}')
    print(f'{BLU}--------------------------------------------------------------------------------------{RST}')
    print('   ')
    print(f'{BLU}-----------------------------------[{ORG}CLUSTER PLAYERS{BLU}]-----------------------------------{RST}')
    print(f'{WHT}Cluster Players online now: {moo}{jo} {WHT}Trends: Last Hour {uoo}{y1} {WHT}Last 8 Hour {uoo2}{y2} {WHT}Last Day {uoo3}{y3}{RST}')
    print('    ')
    print(f'{WHT}Last Hour Avg: {BCYN}{f2dec(getallavg("hourly"))} {WHT}High: {BMGT}{ahv} {WHT}players at {BYEL}{ahd}{RST}')
    print(f'{WHT}Last 8 Hour Avg: {BCYN}{f2dec(getallavg("eighthour"))} {WHT}High: {BMGT}{aev} {WHT}players at {BYEL}{aed}{RST}')
    print(f'{WHT}Last 24 Hour Avg: {BCYN}{f2dec(getallavg("daily"))} {WHT}High: {BMGT}{adv} {WHT}players at {BYEL}{add}{RST}')
    print(f'{WHT}Last Week Avg: {BCYN}{f2dec(getallavg("weekly"))} {WHT}High: {BMGT}{awv} {WHT}players at {BYEL}{awd}{RST}')
    print(f'{WHT}Last Month Avg: {BCYN}{f2dec(getallavg("monthly"))} {WHT}High: {BMGT}{amv} {WHT}players at {BYEL}{amd}{RST}')
    print(f'{BLU}--------------------------------------------------------------------------------------{RST}')
    print('   ')
    print(f'{BLU}-----------------------------------[{ORG}CLUSTER LOTTERY{BLU}]-----------------------------------{RST}')
    lastlottery = dbquery("SELECT * FROM lotteryinfo ORDER BY id DESC LIMIT 1", fetch='one')
    lotteryplayers = db_getall("lotteryplayers")
    lli = float(lastlottery[3]) + (3600 * int(lastlottery[5]))
    lottostart = estshift(datetime.fromtimestamp(lli)).strftime('%a, %b %d %I:%M%p')
    plist = ''
    for row in lotteryplayers:
        if plist == '':
            plist = '%s' % (row[1])
        else:
            plist = plist + ', %s' % (row[1])
    if lastlottery[7] == 'Incomplete':
        print(f'{BGRN}CURRENT LOTTERY UNDERWAY. {WHT}Lottery ends on {BMGT}{lottostart} {BCYN}({elapsedTime(lli, Now())} Left){RST}')
        print(f'{WHT}Lottery Type: {BMGT}{lastlottery[1].capitalize()}{RST}')
        print(f'{WHT}Lottery Prize: {BMGT}{lastlottery[2]}{RST}')
        print(f'{WHT}Buyin Points: {BMGT}{lastlottery[4]}{RST}')
        print(f'{WHT}Lottery Length: {BMGT}{lastlottery[5]} Hours{RST}')
        print(f'{WHT}Current Active Lottery Players: {BMGT}{lastlottery[6]}{RST}')
        print(f'{WHT}Players: {BMGT}{plist}{RST}')
    else:
        print(f'{BRED}NO CURRENT LOTTERYS. {WHT}Last lottery ended on {BYEL}{lottostart} {BCYN}({elapsedTime(Now(), lli)} ago){RST}')
        print(f'{WHT}Winner was: {BGRN}{lastlottery[7].capitalize()}  {WHT}Lottery Type: {BCYN}{lastlottery[1].capitalize()}  {WHT}Lottery Prize: {BMGT}{lastlottery[2]}{RST}')
        print(f'{WHT}Lottery Length: {BMGT}{lastlottery[5]} Hours  {WHT}Buyin Points: {BMGT}{lastlottery[4]}{RST}')
        print(f'{WHT}Participants: {BCYN}({lastlottery[6]}) {BYEL}{plist}{RST}')
    print(f'{BLU}--------------------------------------------------------------------------------------{RST}')
    print('   ')
    print(f'{BLU}------------------------------------[{moo}{jo} {ORG}PLAYERS ON NOW{BLU}]------------------------------------{RST}')
    print('   ')
    for feach in lastones:
        tt = Now() - float(feach[2])
        tr = Now() - float(feach[6])
        if tt < 86400:
            tclr = f'{BGRN}'
        elif tt < 604800:
            tclr = f'{YEL}'
        else:
            tclr = f'{RED}'
        if tr < 604800:
            trclr = f'{BGRN}'
        elif tr < 2592000:
            trclr = f'{YEL}'
        else:
            trclr = f'{RED}'
        printplayer(feach)


def restrtserver(server):
    if not args.cancel:
        dbupdate("UPDATE instances SET needsrestart = 'True', restartreason = 'admin restart' WHERE name = '%s'" % (server, ))
        print(f'{BYEL}server {BMGT}{server}{BYEL} has been set to {BRED}RESTART{RST}')
    else:
        dbupdate("UPDATE instances SET needsrestart = 'False' WHERE name = '%s'" % (server, ))
        print(f'{BYEL}server {BMGT}{server}{BYEL} has been set to {BGRN}NOT RESTART{RST}')


def printcolmns(mtable):
    alldata = db_getcolumns(mtable)
    print(f'{BMGT}{alldata}{RST}')
    print('  ')


def showtable(mtable):
    sc = 0
    cnt = 0
    aplay = dbquery("SELECT * FROM %s" % (mtable,))
    if aplay:
        for each in aplay:
            cnt += 1
            if sc == 0:
                sclr = f'{clr1}'
            else:
                sclr = f'{clr2}'
            print(f'{sclr}{each}{RST}')
            if sc == 1:
                sc = 0
            else:
                sc = 1
            print('   ')
        print(f'{BWHT}Table: {BGRN}{mtable}{BWHT} Total rows: {BMGT}{cnt}{RST}')
    else:
        print(f'{BYEL}{mtable} table is empty.{RST}')


def getresponce(question):
    print('    ')
    check = str(input(f"{question} : ")).lower().strip()
    try:
        return check
    except Exception as error:
        print("Please enter valid inputs")
        print(error)
        exit()


def ask_question(question):
    print('   ')
    check = str(input(f"{question} (Y/N): ")).lower().strip()
    try:
        if check[0] == 'y':
            return True
        elif check[0] == 'n':
            return False
        else:
            print('Invalid Input')
            exit()
    except Exception as error:
        print("Please enter valid inputs")
        print(error)
        exit()


def linkplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to add a discord ID too{RST}')
    print('    ')
    printcolmns('discordnames')
    showtable('discordnames')
    sdid = getresponce(f'{BGRN}Enter Discord Name to add to player {nsteamid}{RST}')
    if ask_question(f'{BGRN}Add Discord Name: {BMGT}{sdid}{BGRN} to Steam ID {BMGT}{nsteamid}{BYEL}?{RST}'):
        dbupdate("UPDATE players SET discordid = '%s' WHERE steamid = '%s'" % (sdid, nsteamid))
        print('    ')
        print(f'{BYEL}Discord Name: {BMGT}{sdid}{BYEL} has been added to {BMGT}{nsteamid}{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Nothing written{RST}')
        print('    ')
    printcolmns('players')
    showtable('players')


def delplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to DELETE{RST}')
    oplayers = db_getall("players")
    for each in oplayers:
        if each[0] == nsteamid:
            if ask_question(f'{BGRN}You will be DELETING {BMGT}{each[1]}{BGRN} with steamid {BMGT}{each[0]}{BGRN} \
from the database. continue?{RST}'):
                dbupdate("DELETE from players WHERE steamid = '%s'" % (nsteamid,))
                print('    ')
                print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been deleted.{RST}')
                print('    ')
            else:
                print('    ')
                print(f'{BRED}Canceled. Skipping delete{RST}')
                print('   ')
    alldata = db_getall("players")
    for row in alldata:
        print(row)


def banplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to BAN{RST}')
    oplayers = db_getall("players")
    juu = 'noname'
    for each in oplayers:
        if each[0] == nsteamid:
            juu = each[1]
    if ask_question(f'{BGRN}You will be BANNING {BMGT}{juu}{BGRN} with steamid {BMGT}{nsteamid}{BGRN} from the \
cluster. continue?{RST}'):
        if juu != 'noname':
            dbupdate("UPDATE players SET banned = '%s' WHERE steamid = '%s'" % (time.time(), nsteamid))
        blid = dbquery("SELECT * from banlist WHERE steamid = '%s'" % (nsteamid, ))
        if not blid:
            dbupdate("INSERT INTO banlist (steamid) VALUES ('%s')" % (nsteamid, ))
        print('    ')
        print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been BANNED from all servers \
in the cluster!{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Skipping ban{RST}')
        print('    ')
    alldata = db_getall("banlist")
    for row in alldata:
        print(row)


def unbanplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to UN-BAN{RST}')
    oplayers = db_getall("players")
    juu = 'noname'
    for each in oplayers:
        if each[0] == nsteamid:
            juu = each[1]
    if ask_question(f'{BGRN}You will be UN-BANNING {BMGT}{juu}{BGRN} with steamid {BMGT}{nsteamid}{BGRN} \
from the cluster. continue?{RST}'):
        if juu != 'noname':
            dbupdate("UPDATE players SET banned = '' WHERE steamid = '%s'" % (nsteamid,))
        blid = dbquery("SELECT * from banlist WHERE steamid = '%s'" % (nsteamid,))
        if blid:
            dbupdate("DELETE FROM banlist WHERE steamid = '%s'" % (nsteamid,))
        print('    ')
        print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been UN-BANNED from \
all servers in the cluster!{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Skipping un-ban{RST}')
        print('    ')
    alldata = db_getall("banlist")
    for row in alldata:
        print(row)


def banlist():
    oplayers = dbquery("SELECT * from players WHERE banned != ''")
    for each in oplayers:
        print(f'{BCYN}{each}{RST}')
    if not oplayers:
        print(f'{BGRN}No player list bans{RST}')
    print('    ')
    oplayers = db_getall("banlist")
    for each in oplayers:
        print(f'{BYEL}{each}{RST}')
    if not oplayers:
        print(f'{BGRN}No ids in ban list{RST}')
    print('    ')


def newest():
    global tclr
    global trclr
    print(f'{BCYN}TOP 10 NEWEST CLUSTER PLAYERS:{RST}')
    print('   ')
    lastones = dbquery("SELECT * from players ORDER BY firstseen DESC LIMIT 10")
    for feach in lastones:
        tt = Now() - float(feach[2])
        tr = Now() - float(feach[6])
        if tt < 86400:
            tclr = f'{BGRN}'
        elif tt < 604800:
            tclr = f'{YEL}'
        else:
            tclr = f'{RED}'
        if tr < 604800:
            trclr = f'{BGRN}'
        elif tr < 2592000:
            trclr = f'{YEL}'
        else:
            trclr = f'{RED}'
        printplayer(feach)


def shortest():
    ppc = 0
    lastones = []
    print(f'{BCYN}TOP 10 SHORTEST PLAY TIME PLAYERS:{RST}')
    print('   ')
    llast = db_getall("players")
    lastones = [list(elem) for elem in llast]
    for f in range(len(lastones)):
        lastones[f][4] = float(str(lastones[f][4]).replace(',', ''))
    lastones.sort(key=lambda x: x[4], reverse=False)
    for feach in lastones:
        ppc += 1
        if ppc <= 10:
            printplayer(feach)


def topplayers():
    ppc = 0
    lastones = []
    print(f'{BCYN}TOP 10 PLAYTIME PLAYERS ALL TIME:{RST}')
    print('   ')
    llast = db_getall("players")
    lastones = [list(elem) for elem in llast]
    for f in range(len(lastones)):
        lastones[f][4] = float(str(lastones[f][4]).replace(',', ''))
    lastones.sort(key=lambda x: x[4], reverse=True)
    for feach in lastones:
        ppc += 1
        if ppc <= 10:
            printplayer(feach)
    # print(f'{BCYN}TOP 5 PLAYTIME PLAYERS LAST WEEK:{RST}')
    # ppc = 1
    # for feach in lastones:
    #    if ppc <= 5 and time.time()-float(feach[2]) < 604800:
    #        ppc += 1
    #        printplayer(feach)


def tribewipe():
    tribeid = getresponce(f'{BGRN}Enter Tribe ID of tribe to DESTROY{RST}')
    if ask_question(f'{BGRN}You will be DESTROYING {BMGT}{tribeid}{BGRN} from the cluster. continue?{RST}'):
        subrun = f"""arkmanager rconcmd 'DestroyTribeIdStructures {tribeid}' @ragnarok"""
        subprocess.run(subrun, shell=True)
        # subrun = f"""arkmanager rconcmd 'DestroyTribeIdDinos {tribeid}' @all && arkmanager rconcmd \
        # 'DestroyTribeIdStructures {tribeid}' @all && arkmanager rconcmd 'DestroyTribeIdPlayers \
        # {tribeid}' @all && arkmanager rconcmd 'DestroyTribeId {tribeid}' @all"""
        print('    ')
        print(f'{BYEL}Removing tribeid {BMGT}{tribeid}{BYEL} from local server{RST}')
        print('   ')
        # subprocess.run('arkmanager rconcmd "saveworld" @all && arkmanager backup @all', shell=True)
        subprocess.run(subrun, shell=True)
        print(f'{BYEL}Removing tribeid {BMGT}{tribeid}{BYEL} from remote server{RST}')
        # sendtoserver(tribeid)
        # print('   ')
        # print(f'{BGRN}TribeID {BMGT}{tribeid}{BGRN} has been DESTROYED from all servers!{RST}')


def oldest():
    global tclr
    global trclr
    print(f'{BCYN}TOP 10 OLDEST LAST TIME SEEN PLAYERS:{RST}')
    print('   ')
    lastones = dbquery("SELECT * from players ORDER BY lastseen ASC LIMIT 10")
    for feach in lastones:
        tt = Now() - float(feach[2])
        tr = Now() - float(feach[6])
        if tt < 86400:
            tclr = f'{BGRN}'
        elif tt < 604800:
            tclr = f'{YEL}'
        else:
            tclr = f'{RED}'
        if tr < 604800:
            trclr = f'{BGRN}'
        elif tr < 2592000:
            trclr = f'{YEL}'
        else:
            trclr = f'{RED}'
        printplayer(feach)


def serverinfo(svr):
    global tclr
    global trclr
    svrifo = dbquery("SELECT * from instances WHERE name = '%s'" % (svr,), fetch='one')
    if not svrifo:
        print(f'{BMGT}{svr}{BRED} is not a server instance{RST}')
    else:
        sdata = fetcharkserverdata(svrifo[8])
        printarkserverdata(sdata)
        printserverinfo(svrifo)
        upo = dbquery("SELECT * from players WHERE server = '%s'" % (svr, ))
        bcnt = 0
        for ueach in upo:
            if float(time.time()) - float(ueach[2]) < 3600:
                bcnt += 1
        if bcnt == 0:
            pp = f'{BRED}'
        else:
            pp = f'{BGRN}'
        print(f'{BCYN}NUMBER OF PLAYERS IN LAST HOUR: {pp}{bcnt}{RST}')
        print('    ')
        bcnt = 0
        for ueach in upo:
            if float(time.time()) - float(ueach[2]) < 86400:
                bcnt += 1
        if bcnt == 0:
            pp = f'{BRED}'
        else:
            pp = f'{BGRN}'
        print(f'{BCYN}NUMBER OF PLAYERS IN LAST DAY: {pp}{bcnt}{RST}')
        print('    ')
        bcnt = 0
        for ueach in upo:
            if float(time.time()) - float(ueach[2]) < 604800:
                bcnt += 1
        if bcnt == 0:
            pp = f'{BRED}'
        else:
            pp = f'{BGRN}'
        print(f'{BCYN}NUMBER OF PLAYERS IN LAST WEEK: {pp}{bcnt}{RST}')
        print('    ')

        print(f'{BCYN}LAST 10 PLAYERS ONLINE:{RST}')
        print('   ')
        lastones = dbquery("SELECT * from players WHERE server = '%s' ORDER BY lastseen DESC LIMIT 10" % (svr,))
        for feach in lastones:
            tt = Now() - float(feach[2])
            if tt < 300:
                tclr = f'{BGRN}'
            elif tt < 86400:
                tclr = f'{YEL}'
            else:
                tclr = f'{RED}'
            printplayer(feach)
        print('   ')
        print(f'{BCYN}LAST 5 NEWEST PLAYERS:{RST}')
        print('   ')
        lastones = dbquery("SELECT * from players WHERE server = '%s' ORDER BY firstseen DESC LIMIT 5" % (svr,))
        for feach in lastones:
            tt = Now() - float(feach[2])
            if tt < 300:
                tclr = f'{BGRN}'
            elif tt < 86400:
                tclr = f'{YEL}'
            else:
                tclr = f'{RED}'
            printplayer(feach)
        print('   ')


def playerage():
    print(f'{BCYN}PLAYERS BY LAST TIME SEEN:{RST}')
    print('    ')
    lastones = dbquery("SELECT * from players ORDER BY playername DESC")
    for feach in lastones:
        printplayer(feach)
    print('   ')


def follow(stream):
    line = ''
    try:
        for block in iter(lambda: stream.read(1024), None):
            if '\n' in block:
                for line in (line + block).splitlines(True) + ['']:
                    if line.endswith('\n'):
                        yield line.strip()
            elif not block:
                # Wait for data.
                time.sleep(1.0)
    except KeyboardInterrupt:
        print('Exited.')


def pyarklogs():
    arklog = subprocess.run('tail -%s /home/ark/shared/logs/pyark/pyark.log' % (args.loglines,),
                            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
    for each in arklog.stdout.decode('utf-8').split('\n'):
        if each.find('[CRITICAL]') != -1:
            ar = f'{BRED}'
        elif each.find('[ERROR]') != -1:
            ar = f'{BRED}'
        elif each.find('[WARNING]') != -1:
            ar = f'{BYEL}'
        elif each.find('[INFO]') != -1:
            if each.find('svr1') != -1:
                ar = f'{WHT}'
            else:
                ar = f'{BWHT}'
        print(f'{ar}{each}{RST}')



def writechat(inst, whos, msg, tstamp):
    isindb = dbquery("SELECT * from players WHERE playername = '%s'" % (whos,), fetch='one')
    if isindb:
        dbupdate("INSERT INTO chatbuffer (server,name,message,timestamp) VALUES ('%s', '%s', '%s', '%s')" %
                 (inst, whos, msg, tstamp))


def resetlastwipe(sinst):
    dbupdate("UPDATE instances SET lastdinowipe = '%s' WHERE name = '%s'" % (Now(), sinst))


def listtables(dbn):
    if dbn == 'sqldb':
        dbna = ''
    elif dbn == 'statsdb':
        dbna = ''
    aplay = db_gettables(dbna)
    sc = 0
    cnt = 0
    if aplay:
        for each in aplay:
            cnt += 1
            if sc == 0:
                sclr = f'{clr1}'
            else:
                sclr = f'{clr2}'
            print(f'{sclr}{each[0]}{RST}')
            if sc == 1:
                sc = 0
            else:
                sc = 1
        print(f'\n{BWHT}Total Tables: {BMGT}{cnt}{RST}\n')


def initdinowipe(sinst):
    print(f'{BYEL}Initiating a Wild Dino Wipe on server {BMGT}{sinst.capitalize()}{RST}')
    resetlastwipe(sinst)
    subprocess.run('arkmanager rconcmd "ServerChat admin initated a wild dino wipe, wiping in 10 seconds" @%s' %
                   (sinst), shell=True)
    writechat(sinst, 'ALERT', f'### A wild dino wipe as been initiated by admin. Wiping wild dinos now.', wcstamp())
    time.sleep(10)
    subprocess.run('arkmanager rconcmd DestroyWildDinos @%s' % (sinst), stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)


def backupdb():
    try:
        subprocess.run("""rm /home/ark/shared/db/pyark.db.old""", shell=True)
    except:
        pass
    subprocess.run("""/usr/bin/sqlite3 /home/ark/shared/db/pyark.db '.backup "/home/ark/shared/db/pyark.db.old"'""", shell=True)
    print(f'{BYEL}Database backed up to {sharedpath}/db/pyark.db.old{RST}')


def startevent():
    etitle = getresponce('(ex. "Halloween Weekend")\nEnter Title of the Event')
    etitle = etitle.title()
    edesc = getresponce('(ex. "2x XP, 2x Reward Points")\nEnter Description of the Event')
    edesc = edesc.title()
    esuffix = getresponce('(ex. "halloween")\nEnter Config File Suffix ')
    estart = getresponce('(ex. "10-31-18 08:00PM")\nEnter Evemt Start Time in EST')
    try:
        estartdt = gmtshift(datetime.strptime(estart, '%m-%d-%y %I:%M%p'))
    except:
        print(f'\nCould not determine date from input. Exiting\n')
        exit()
    estop = getresponce('(ex. "10-31-18 08:00PM")\nEnter Evemt Stop Time in EST')
    try:
        estopdt = gmtshift(datetime.strptime(estop, '%m-%d-%y %I:%M%p'))
    except:
        print(f'\nCould not determine date from input. Exiting\n')
        exit()
    if datetimeto(estopdt, 'epoch') < Now():
        print(f'\nEnd Time cannot be before current time. Exiting\n')
        exit()
    print(f'{BGRN}New Event:{RST}')
    print('    ')
    print(f'{BYEL}Event Title: {BCYN}{etitle}{RST}')
    print(f'{BYEL}Event Description: {BCYN}{edesc}{RST}')
    print(f'{BYEL}Config Suffix: {BCYN}{esuffix}  {BMGT}(ex. Game-{esuffix}.ini){RST}')
    print('    ')
    if datetimeto(estartdt, 'epoch') < Now():
        print(f'{BYEL}Event Started: {BCYN}{estshift(estartdt)}  {BMGT}{elapsedTime(Now(),datetimeto(estartdt, "epoch"))} ago{RST}')
    else:
        print(f'{BYEL}Event Starts: {BCYN}{estshift(estartdt)}  {BMGT}in {elapsedTime(datetimeto(estartdt, "epoch"),Now())}{RST}')
    print(f'{BYEL}Event Ends: {BCYN}{estshift(estopdt)}  {BMGT}in {elapsedTime(datetimeto(estopdt, "epoch"),Now())}{RST}')
    print(f'{BYEL}Event Length: {BCYN}{elapsedTime(datetimeto(estopdt, "epoch"), datetimeto(estartdt, "epoch"))}{RST}')
    ags = getresponce('Start this event now? (y/n)')
    print(ags)
    if ags != 'y':
        print('Event NOT started')
        exit()
    dbupdate("INSERT INTO events (completed,starttime,endtime,title,description,cfgfilesuffix) VALUES \
              ('%s','%s','%s','%s','%s','%s')" % (0, datetimeto(estartdt, 'epoch'), datetimeto(estopdt, 'epoch'), etitle, edesc, esuffix))


def startlottery():
    showtable('lotteryinfo')
    print('    ')
    ltype = getresponce('Select Lottery Type (points / item) ')
    lbuyin = int(getresponce('Enter rewards points buyin amount '))
    ldays = int(getresponce('Enter lottery length in hours '))
    print('    ')
    print(f'{BGRN}Starting the new lottery:{RST}')
    print('    ')
    if ltype.lower() == 'item':
        litm = getresponce('Enter the Item display name ')
    else:
        litm = str(lbuyin * 10)
    lottostart = datetime.fromtimestamp(Now() + (3600 * int(ldays))).strftime('%a, %b %d %I:%M%p')
    print(f'{BYEL}Lottery ends on {BMGT}{lottostart}{RST}')
    print(f'{BYEL}Lottery Type: {BMGT}{ltype.capitalize()}{RST}')
    print(f'{BYEL}Lottery Prize: {BMGT}{litm}{RST}')
    print(f'{BYEL}Buyin Points: {BMGT}{lbuyin}{RST}')
    print(f'{BYEL}Lottery Length: {BMGT}{ldays} Hours{RST}')
    print('    ')
    dbupdate("INSERT INTO lotteryinfo (type,payoutitem,timestamp,buyinpoints,lengthdays,players,winner,announced) VALUES ('%s','%s','%s','%s','%s',0,'Incomplete',False)" % (ltype, litm, Now(), lbuyin, ldays))


def lottery():
    lastlottery = dbquery("SELECT * FROM lotteryinfo ORDER BY id DESC LIMIT 1", fetch='one')
    lotteryplayers = db_getall("lotteryplayers")
    lotterydeposits = db_getall("lotterydeposits")
    lotterywins = dbquery("SELECT * FROM players ORDER BY lottowins DESC LIMIT 5")
    plist = ''
    for row in lotteryplayers:
        if plist == '':
            plist = '%s' % (row[1])
        else:
            plist = plist + ', %s' % (row[1])
    now = time.time()
    lli = float(lastlottery[3]) + (3600 * int(lastlottery[5]))
    lottostart = estshift(datetime.fromtimestamp(lli)).strftime('%a, %b %d %I:%M%p')
    print('   ')
    print(f'{BCYN}TOP 5 WINNERS:')
    for peach in lotterywins:
        printplayer(peach)
    print(f'{BCYN}LOTTERY DEPOSITS/WITHDRAWS PENDING:{RST}')
    for leach in lotterydeposits:
        if int(leach[4]) == 0:
            ltype = f'{BRED}WITHDRAW{RST}'
        elif int(leach[4]) == 1:
            ltype = f'{BGRN}DEPOSIT{RST}'
        print(f'{BYEL}Player: {BMGT}{leach[1]} {BYEL}Type: {ltype} {BYEL}Amount: {BCYN}{leach[3]} {BYEL}Waiting: \
{BCYN}{elapsedTime(now,leach[2])}{RST}')
    print('   ')
    if lastlottery[7] == 'Incomplete':
        print(f'{BGRN}CURRENT LOTTERY UNDERWAY:{RST}')
        print(f'{BYEL}Lottery ends on {BMGT}{lottostart} {BCYN}({elapsedTime(lli, now)} Left){RST}')
        print(f'{BYEL}Lottery Type: {BMGT}{lastlottery[1].capitalize()}{RST}')
        print(f'{BYEL}Lottery Prize: {BMGT}{lastlottery[2]}{RST}')
        print(f'{BYEL}Buyin Points: {BMGT}{lastlottery[4]}{RST}')
        print(f'{BYEL}Lottery Length: {BMGT}{lastlottery[5]} Hours{RST}')
        print(f'{BYEL}Current Active Lottery Players: {BMGT}{lastlottery[6]}{RST}')
        print(f'{BYEL}Players: {BMGT}{plist}{RST}')
    else:
        print(f'{BRED}NO CURRENT LOTTERYS. LAST LOTTERY:{RST}')
        print(f'{BYEL}Winner was: {BGRN}{lastlottery[7].capitalize()}{RST}')
        print(f'{BYEL}Lottery ended on {BMGT}{lottostart} {BCYN}({elapsedTime(now, lli)} ago){RST}')
        print(f'{BYEL}Lottery Type: {BMGT}{lastlottery[1].capitalize()}{RST}')
        print(f'{BYEL}Lottery Prize: {BMGT}{lastlottery[2]}{RST}')
        print(f'{BYEL}Buyin Points: {BMGT}{lastlottery[4]}{RST}')
        print(f'{BYEL}Lottery Length: {BMGT}{lastlottery[5]} Hours{RST}')
        print(f'{BYEL}Participated Lottery Players: {BMGT}{lastlottery[6]}{RST}')
        print(f'{BYEL}Players: {BMGT}{plist}{RST}')
    print('   ')


try:
    if args.action_to_perform == 'cluster':
        showservers()
    elif args.action_to_perform == 'showtable':
        if args.tablename == '':
            print('You must specify a table name with -t option.')
        else:
            printcolmns(args.tablename)
            showtable(args.tablename)
    elif args.action_to_perform == 'listtables':
        if args.dbname == '':
            print('You must specify a database name with -d option.')
        else:
            listtables(args.dbname)
    elif args.action_to_perform == 'kicklist':
        printcolmns('kicklist')
        showtable('kicklist')
    elif args.action_to_perform == 'linkrequests':
        printcolmns('linkrequests')
        showtable('linkrequests')
    elif args.action_to_perform == 'lotterytables':
        printcolmns('lotteryinfo')
        showtable('lotteryinfo')
        print('    ')
        printcolmns('lotteryplayers')
        showtable('lotteryplayers')
        print('     ')
        printcolmns('lotterydeposits')
        showtable('lotterydeposits')
    elif args.action_to_perform == 'notlinked':
        showtable('players')
        #listtablewhere('players', 'discordid', '')
    elif args.action_to_perform == 'discordnames':
        printcolmns('discordnames')
        showtable('discordnames')
    elif args.action_to_perform == 'restartserver':
        if args.servername == '':
            print('You must specify a server name with -s option.')
        else:
            restartserver(args.servername)
    elif args.action_to_perform == 'dinowipe':
        if args.servername == '':
            print('You must specify a server name with -s option.')
        else:
            initdinowipe(args.servername)
    elif args.action_to_perform == 'linkplayer':
        linkplayer()
    elif args.action_to_perform == 'delplayer':
        delplayer()
    elif args.action_to_perform == 'newest':
        newest()
    elif args.action_to_perform == 'shortest':
        shortest()
    elif args.action_to_perform == 'server':
        if args.servername is None:
            print('You must specify a server name with -s option.')
        else:
            serverinfo(args.servername)
    elif args.action_to_perform == 'players':
        playerage()
    elif args.action_to_perform == 'servertable':
        printcolmns('instances')
        showtable('instances')
    elif args.action_to_perform == 'oldest':
        oldest()
    elif args.action_to_perform == 'chatbuffer':
        printcolmns('globalbuffer')
        showtable('globalbuffer')
    elif args.action_to_perform == 'playersraw':
        playersraw()
    elif args.action_to_perform == 'logwatch':
        watchlog(False)
    elif args.action_to_perform == 'debugwatch':
        watchlog(True)
    elif args.action_to_perform == 'logsearch':
        if args.searcharg is None:
            print('You must specify a search value with the -l option.')
        else:
            alogsearcher(args.searcharg)
    elif args.action_to_perform == 'banlist':
        banlist()
    elif args.action_to_perform == 'topplayers':
        topplayers()
    elif args.action_to_perform == 'lottery':
        lottery()
    elif args.action_to_perform == 'banplayer':
        banplayer()
    elif args.action_to_perform == 'unbanplayer':
        unbanplayer()
    elif args.action_to_perform == 'tribewipe':
        tribewipe()
    elif args.action_to_perform == 'backupdb':
        backupdb()
    elif args.action_to_perform == 'startlottery':
        startlottery()
    elif args.action_to_perform == 'startevent':
        startevent()
    elif args.action_to_perform == 'start':
        sctl('start')
    elif args.action_to_perform == 'stop':
        sctl('stop')
    elif args.action_to_perform == 'restart':
        sctl('restart')
    elif args.action_to_perform == 'killall':
        killall()
    elif args.action_to_perform == 'test':
        print(getallavg('monthly'))
    elif args.action_to_perform == 'log':
        if args.loglines is None:
            print('You must specify number of log lines to show with -j option.')
        else:
            pyarklogs()
    else:
        subprocess.run('/home/ark/pyark/pyarkcli -h', shell=True)
    print('       ')
except:
    log.critical('error!', exc_info=True)
