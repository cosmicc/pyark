#!/usr/bin/env python3.7

import argparse
import subprocess
import sys
import time
from os import system
from sys import exit

import redis

from modules.colorizer import (BCYN, BGN, BGRN, BLU, BMGT, BRED, BWHT, BYEL, GRN, LREV,
                               MAU, MGT, ORG, PUR, RED, RMY, RST, SKN, SLT, WHT, YEL)
from modules.configreader import redis_host, redis_port

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('action_to_perform', action='store', choices=['start', 'stop', 'restart', 'log', 'debuglog', 'update', 'updateall'], help='Action to perform')
action_group = parser.add_argument_group(title='actions')
action_group.add_argument('start', action='store_true', help='Start the pyark daemon Systemctl')
action_group.add_argument('stop', action='store_true', help='Stop the pyark daemon Systemctl')
action_group.add_argument('restart', action='store_true', help='Restart the pyark daemon Systemctl')
action_group.add_argument('cluster', action='store_true', help='Cluster information')
action_group.add_argument('log', action='store_true', help='Pyark log')
action_group.add_argument('debuglog', action='store_true', help='Pyark log')

parser.add_argument('-s', '--servername', action='store', help='Ark server instance name')
parser.add_argument('-l', '--loglines', action='store', help='Number of log lines to show')

args = parser.parse_args()

print('    ')

null = None


def killall():
    with open('/tmp/pyark.pid') as inf:
        for line in inf:
            system(f'kill -9 {line}')
    print('All pyark processes killed.')


def percentage(part, whole):
    return 100 * float(part) / float(whole)


def logwatch(debug=False):
    if args.loglines is None:
        loglines = 50
    else:
        loglines = args.loglines
    if debug:
        command = f'/home/ark/pyark/logclient {loglines} -d'
    else:
        command = f'/home/ark/pyark/logclient {loglines}'
    subprocess.run(command, stdout=sys.stdout, stderr=sys.stderr, shell=True)


def sctl(scmd):
    if scmd == 'start':
        command = '/bin/systemctl start pyark'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        command = '/bin/systemctl start arkwatchdog'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        print('PyArk Started')
    elif scmd == 'stop':
        command = '/bin/systemctl stop arkwatchdog'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        command = '/bin/systemctl stop pyark'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        print('Stopping PyArk Daemon')
    elif scmd == 'restart':
        command = '/bin/systemctl restart pyark'
        subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
        print('Restarting PyArk Daemon')


def updateall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allinstances = r.smembers('allinstances')
    for inst in allinstances:
        inst = inst.decode()
        print(inst)
        r.publish(f'{inst}-commands', 'pyarkupdate')


def getresponse(question):
    print('    ')
    check = str(input(f"{question} : ")).lower().strip()
    try:
        return check
    except Exception as error:
        print("Please enter valid inputs")
        print(error)
        exit()


def ask_question(question):
    print('   ')
    check = str(input(f"{question} (Y/N): ")).lower().strip()
    try:
        if check[0] == 'y':
            return True
        elif check[0] == 'n':
            return False
        else:
            print('Invalid Input')
            exit()
    except Exception as error:
        print("Please enter valid inputs")
        print(error)
        exit()


def banplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to BAN{RST}')
    oplayers = db_getall("players")
    juu = 'noname'
    for each in oplayers:
        if each[0] == nsteamid:
            juu = each[1]
    if ask_question(f'{BGRN}You will be BANNING {BMGT}{juu}{BGRN} with steamid {BMGT}{nsteamid}{BGRN} from the \
cluster. continue?{RST}'):
        if juu != 'noname':
            dbupdate("UPDATE players SET banned = '%s' WHERE steamid = '%s'" % (time.time(), nsteamid))
        blid = dbquery("SELECT * from banlist WHERE steamid = '%s'" % (nsteamid, ))
        if not blid:
            dbupdate("INSERT INTO banlist (steamid) VALUES ('%s')" % (nsteamid, ))
        print('    ')
        print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been BANNED from all servers \
in the cluster!{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Skipping ban{RST}')
        print('    ')
    alldata = db_getall("banlist")
    for row in alldata:
        print(row)


def unbanplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to UN-BAN{RST}')
    oplayers = db_getall("players")
    juu = 'noname'
    for each in oplayers:
        if each[0] == nsteamid:
            juu = each[1]
    if ask_question(f'{BGRN}You will be UN-BANNING {BMGT}{juu}{BGRN} with steamid {BMGT}{nsteamid}{BGRN} \
from the cluster. continue?{RST}'):
        if juu != 'noname':
            dbupdate("UPDATE players SET banned = '' WHERE steamid = '%s'" % (nsteamid,))
        blid = dbquery("SELECT * from banlist WHERE steamid = '%s'" % (nsteamid,))
        if blid:
            dbupdate("DELETE FROM banlist WHERE steamid = '%s'" % (nsteamid,))
        print('    ')
        print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been UN-BANNED from \
all servers in the cluster!{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Skipping un-ban{RST}')
        print('    ')
    alldata = db_getall("banlist")
    for row in alldata:
        print(row)


def banlist():
    oplayers = dbquery("SELECT * from players WHERE banned != ''")
    for each in oplayers:
        print(f'{BCYN}{each}{RST}')
    if not oplayers:
        print(f'{BGRN}No player list bans{RST}')
    print('    ')
    oplayers = db_getall("banlist")
    for each in oplayers:
        print(f'{BYEL}{each}{RST}')
    if not oplayers:
        print(f'{BGRN}No ids in ban list{RST}')
    print('    ')


def tribewipe():
    tribeid = getresponse(f'{BGRN}Enter Tribe ID of tribe to DESTROY{RST}')
    if ask_question(f'{BGRN}You will be DESTROYING {BMGT}{tribeid}{BGRN} from the cluster. continue?{RST}'):
        subrun = f"""arkmanager rconcmd 'DestroyTribeIdStructures {tribeid}' @ragnarok"""
        subprocess.run(subrun, shell=True)
        # subrun = f"""arkmanager rconcmd 'DestroyTribeIdDinos {tribeid}' @all && arkmanager rconcmd \
        # 'DestroyTribeIdStructures {tribeid}' @all && arkmanager rconcmd 'DestroyTribeIdPlayers \
        # {tribeid}' @all && arkmanager rconcmd 'DestroyTribeId {tribeid}' @all"""
        print('    ')
        print(f'{BYEL}Removing tribeid {BMGT}{tribeid}{BYEL} from local server{RST}')
        print('   ')
        # subprocess.run('arkmanager rconcmd "saveworld" @all && arkmanager backup @all', shell=True)
        subprocess.run(subrun, shell=True)
        print(f'{BYEL}Removing tribeid {BMGT}{tribeid}{BYEL} from remote server{RST}')
        # sendtoserver(tribeid)
        # print('   ')
        # print(f'{BGRN}TribeID {BMGT}{tribeid}{BGRN} has been DESTROYED from all servers!{RST}')


if args.action_to_perform == 'start':
    sctl('start')
elif args.action_to_perform == 'stop':
    sctl('stop')
elif args.action_to_perform == 'restart':
    sctl('restart')
elif args.action_to_perform == 'killall':
    killall()
elif args.action_to_perform == 'log':
    logwatch()
elif args.action_to_perform == 'debuglog':
    logwatch(debug=True)
elif args.action_to_perform == 'updateall':
    updateall()
