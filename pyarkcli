#!/usr/bin/env python3.7

import argparse
import subprocess
import sys
import time
from os import system
from sys import exit

import redis

from modules.colorizer import (BCYN, BGN, BGRN, BLU, BMGT, BRED, BWHT, BYEL, GRN, LREV,
                               MAU, MGT, ORG, PUR, RED, RMY, RST, SKN, SLT, WHT, YEL)
from modules.configreader import redis_host, redis_port


def startpyark(args):
    print(f'args: {args}')
    print(f'server: {args.servername}')
    allservers = r.smembers('servers')
    if args.server in allservers:
        print(f'Running pyark start on server: [{args.server}]\n')
        r.publish(f'{args.server.lower()}-commands', 'start')
    elif args.server.lower() == 'all':
        print(f'Running pyark start on {len(allservers)} servers: [{allservers}]\n')
        for server in allservers:
            r.publish(f'{server.decode()}-commands', 'start')
    else:
        print(f'You need to specify a valid server to {args.desc} on\n')


parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title='action', description='valid actions to perform',)

parser_start = subparsers.add_parser('start')
parser_start.add_argument('servername')
parser_start.add_argument('desc', action='const', default="description!")
parser_start.set_defaults(func=startpyark)

parser_start = subparsers.add_parser('stop')
parser_start.add_argument('servername')
parser_start.set_defaults(func=startpyark)


args = parser.parse_args()
args.func(args)

"""
parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
action_group = parser.add_argument_group(title='actions')
action_group.add_argument('start', action='store_true', help='Start a pyark daemon')
action_group.add_argument('startall', action='store_true', help='Start all the pyark daemons')
action_group.add_argument('stop', action='store_true', help='Stop a pyark daemon')
action_group.add_argument('stopall', action='store_true', help='Stop all the pyark daemons')
action_group.add_argument('restart', action='store_true', help='Restart a pyark daemon')
action_group.add_argument('restartall', action='store_true', help='Restart all the pyark daemons')
action_group.add_argument('update', action='store_true', help='Update check a pyark daemon')
action_group.add_argument('updateall', action='store_true', help='Update check all the pyark daemons')
action_group.add_argument('kill', action='store_true', help='Kill a pyark daemon')
action_group.add_argument('killall', action='store_true', help='Kill all the pyark daemons')
action_group.add_argument('log', action='store_true', help='Pyark log')
action_group.add_argument('debuglog', action='store_true', help='Pyark debug log')
action_group.add_argument('gitpull', action='store_true', help='Force a git pull on server (to recover from bad commit)')
action_group.add_argument('gitpullall', action='store_true', help='Force a git pull on all servers')
action_group.add_argument('watchdogrestart', action='store_true', help='Restart Arkwatchdog on a server')
action_group.add_argument('loglevel', action='store_true', nargs=2, help='Set pyark loglevel on a server')

parser.add_argument('-s', '--server', action='store', help='Server name')
parser.add_argument('-l', '--loglines', action='store', help='Number of log lines to show')
"""

print('    ')

null = None

r = redis.Redis(host=redis_host, port=redis_port, db=0)


def oldkillall():
    with open('/tmp/pyark.pid') as inf:
        for line in inf:
            system(f'kill -9 {line}')
    print('All pyark processes killed.')


def percentage(part, whole):
    return 100 * float(part) / float(whole)


def logwatch(debug=False):
    if args.loglines is None:
        loglines = 50
    else:
        loglines = args.loglines
    if debug:
        command = f'/home/ark/pyark/logclient {loglines} -d'
    else:
        command = f'/home/ark/pyark/logclient {loglines}'
    subprocess.run(command, stdout=sys.stdout, stderr=sys.stderr, shell=True)


def sctl(scmd):
    allservers = r.smembers('servers')
    if scmd == 'start':
        if args.server is None:
            command = '/bin/systemctl start pyark'
            subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
            print('PyArk Started')
        elif args.server in allservers:
            print(f'Running pyark start on server: [{args.server}]\n')
            r.publish(f'{args.server.lower()}-commands', 'start')
        else:
            print(f'You need to specify a valid server to start the pyark\n')

    elif scmd == 'stop':
        if args.server is None:
            command = '/bin/systemctl stop pyark'
            subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
            print('Stopping PyArk Daemon')
        elif args.server in allservers:
            print(f'Running pyark STOP on server: [{args.server}]\n')
            r.publish(f'{args.server.lower()}-commands', 'stop')
        else:
            print(f'You need to specify a valid server to stop the pyark\n')
    elif scmd == 'restart':
        if args.server is None:
            command = '/bin/systemctl restart pyark'
            subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True)
            print('Restarting PyArk Daemon')
        elif args.server in allservers:
            print(f'Running pyark restart on server: [{args.server}]\n')
            r.publish(f'{args.server.lower()}-commands', 'restart')
        else:
            print(f'You need to specify a valid server to retart the pyark\n')


def gitpullall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allservers = r.smembers('servers')
    print(f'Running force git pull on {len(allservers)} servers: [{allservers}]\n')
    for server in allservers:
        server = server.decode()
        r.publish(f'{server}-commands', 'gitpull')


def startall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allservers = r.smembers('servers')
    print(f'Running pyark start on {len(allservers)} servers: [{allservers}]\n')
    for server in allservers:
        server = server.decode()
        r.publish(f'{server}-commands', 'start')


def stopall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allservers = r.smembers('servers')
    print(f'Running pyark STOP on {len(allservers)} servers: [{allservers}]\n')
    for server in allservers:
        server = server.decode()
        r.publish(f'{server}-commands', 'stop')


def restartall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allservers = r.smembers('servers')
    print(f'Running pyark restart on {len(allservers)} servers: [{allservers}]\n')
    for server in allservers:
        server = server.decode()
        r.publish(f'{server}-commands', 'restart')


def killall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allservers = r.smembers('servers')
    print(f'Running pyark kill process on {len(allservers)} servers: [{allservers}]\n')
    for server in allservers:
        server = server.decode()
        r.publish(f'{server}-commands', 'kill')


def killsvr():
    allservers = r.smembers('servers')
    if args.server is None or args.server not in allservers:
        print(f'You need to specify a valid server to kill the pyark\n')
    else:
        for server in allservers:
            server = server.decode().lower()
            if args.server.lower() == server:
                print(f'Running pyark kill process on server: [{args.server}]\n')
                r.publish(f'{server}-commands', 'kill')


def gitpull():
    allservers = r.smembers('servers')
    if args.server is None or args.server.encode() not in allservers:
        print(f'You need to specify a valid server to force git pull\n')
    else:
        for server in allservers:
            server = server.decode().lower()
            if args.server.lower() == server:
                print(f'Running force git pull on server: [{args.server}]\n')
                r.publish(f'{server}-commands', 'gitpull')


def watchdogrestart():
    allservers = r.smembers('servers')
    if args.server is None or args.server.encode() not in allservers:
        print(f'You need to specify a valid server to restart watchdog\n')
    else:
        for server in allservers:
            server = server.decode().lower()
            if args.server.lower() == server:
                print(f'Running watchdog restart on server: [{args.server}]\n')
                r.publish(f'{server}-commands', 'restartwatchdog')


def updateall():
    r = redis.Redis(host=redis_host, port=redis_port, db=0)
    allservers = r.smembers('servers')
    print(f'Running pyark update check on {len(allservers)} servers: [{allservers}]\n')
    for server in allservers:
        server = server.decode()
        r.publish(f'{server}-commands', 'update')


def updatesvr():
    allservers = r.smembers('servers')
    if args.server is None or args.server.encode() not in allservers:
        print(f'You need to specify a valid server to check for updates\n')
    else:
        for server in allservers:
            server = server.decode().lower()
            if args.server.lower() == server:
                print(f'Running pyark update check on server: [{args.server}]\n')
                r.publish(f'{server}-commands', 'update')


def getresponse(question):
    print('    ')
    check = str(input(f"{question} : ")).lower().strip()
    try:
        return check
    except Exception as error:
        print("Please enter valid inputs")
        print(error)
        exit()


def ask_question(question):
    print('   ')
    check = str(input(f"{question} (Y/N): ")).lower().strip()
    try:
        if check[0] == 'y':
            return True
        elif check[0] == 'n':
            return False
        else:
            print('Invalid Input')
            exit()
    except Exception as error:
        print("Please enter valid inputs")
        print(error)
        exit()


def banplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to BAN{RST}')
    oplayers = db_getall("players")
    juu = 'noname'
    for each in oplayers:
        if each[0] == nsteamid:
            juu = each[1]
    if ask_question(f'{BGRN}You will be BANNING {BMGT}{juu}{BGRN} with steamid {BMGT}{nsteamid}{BGRN} from the \
cluster. continue?{RST}'):
        if juu != 'noname':
            dbupdate("UPDATE players SET banned = '%s' WHERE steamid = '%s'" % (time.time(), nsteamid))
        blid = dbquery("SELECT * from banlist WHERE steamid = '%s'" % (nsteamid, ))
        if not blid:
            dbupdate("INSERT INTO banlist (steamid) VALUES ('%s')" % (nsteamid, ))
        print('    ')
        print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been BANNED from all servers \
in the cluster!{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Skipping ban{RST}')
        print('    ')
    alldata = db_getall("banlist")
    for row in alldata:
        print(row)


def unbanplayer():
    printcolmns('players')
    showtable('players')
    nsteamid = getresponce(f'{BGRN}Enter Steam ID of player to UN-BAN{RST}')
    oplayers = db_getall("players")
    juu = 'noname'
    for each in oplayers:
        if each[0] == nsteamid:
            juu = each[1]
    if ask_question(f'{BGRN}You will be UN-BANNING {BMGT}{juu}{BGRN} with steamid {BMGT}{nsteamid}{BGRN} \
from the cluster. continue?{RST}'):
        if juu != 'noname':
            dbupdate("UPDATE players SET banned = '' WHERE steamid = '%s'" % (nsteamid,))
        blid = dbquery("SELECT * from banlist WHERE steamid = '%s'" % (nsteamid,))
        if blid:
            dbupdate("DELETE FROM banlist WHERE steamid = '%s'" % (nsteamid,))
        print('    ')
        print(f'{BYEL}Player {BMGT}{each[1]}{BYEL} with steamid {BMGT}{each[0]}{BYEL} has been UN-BANNED from \
all servers in the cluster!{RST}')
        print('    ')
    else:
        print('    ')
        print(f'{BRED}Canceled. Skipping un-ban{RST}')
        print('    ')
    alldata = db_getall("banlist")
    for row in alldata:
        print(row)


def banlist():
    oplayers = dbquery("SELECT * from players WHERE banned != ''")
    for each in oplayers:
        print(f'{BCYN}{each}{RST}')
    if not oplayers:
        print(f'{BGRN}No player list bans{RST}')
    print('    ')
    oplayers = db_getall("banlist")
    for each in oplayers:
        print(f'{BYEL}{each}{RST}')
    if not oplayers:
        print(f'{BGRN}No ids in ban list{RST}')
    print('    ')


def tribewipe():
    tribeid = getresponse(f'{BGRN}Enter Tribe ID of tribe to DESTROY{RST}')
    if ask_question(f'{BGRN}You will be DESTROYING {BMGT}{tribeid}{BGRN} from the cluster. continue?{RST}'):
        subrun = f"""arkmanager rconcmd 'DestroyTribeIdStructures {tribeid}' @ragnarok"""
        subprocess.run(subrun, shell=True)
        # subrun = f"""arkmanager rconcmd 'DestroyTribeIdDinos {tribeid}' @all && arkmanager rconcmd \
        # 'DestroyTribeIdStructures {tribeid}' @all && arkmanager rconcmd 'DestroyTribeIdPlayers \
        # {tribeid}' @all && arkmanager rconcmd 'DestroyTribeId {tribeid}' @all"""
        print('    ')
        print(f'{BYEL}Removing tribeid {BMGT}{tribeid}{BYEL} from local server{RST}')
        print('   ')
        # subprocess.run('arkmanager rconcmd "saveworld" @all && arkmanager backup @all', shell=True)
        subprocess.run(subrun, shell=True)
        print(f'{BYEL}Removing tribeid {BMGT}{tribeid}{BYEL} from remote server{RST}')
        # sendtoserver(tribeid)
        # print('   ')
        # print(f'{BGRN}TribeID {BMGT}{tribeid}{BGRN} has been DESTROYED from all servers!{RST}')


"""
if args.action_to_perform == 'start':
    sctl('start')
elif args.action_to_perform == 'stop':
    sctl('stop')
elif args.action_to_perform == 'restart':
    sctl('restart')
elif args.action_to_perform == 'killall':
    killall()
elif args.action_to_perform == 'log':
    logwatch()
elif args.action_to_perform == 'debuglog':
    logwatch(debug=True)
elif args.action_to_perform == 'updateall':
    updateall()
elif args.action_to_perform == 'update':
    updatesvr()
elif args.action_to_perform == 'startall':
    startall()
elif args.action_to_perform == 'stopall':
    stopall()
elif args.action_to_perform == 'restartall':
    restartall()
elif args.action_to_perform == 'kill':
    killsvr()
elif args.action_to_perform == 'killall':
    killall()
elif args.action_to_perform == 'gitpull':
    gitpull()
elif args.action_to_perform == 'gitpullall':
    gitpullall()
elif args.action_to_perform == 'watchdogrestart':
    watchdogrestart()
elif args.loglevel:
    print(args.loglevel)
"""
