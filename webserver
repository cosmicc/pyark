#!/usr/bin/env python3.6

import argparse
from modules.configreader import webserver_ip, webserver_port, jsondebugfile, jsonlogfile, colorlogfile, debugfile
from web import create_app, socketio
from os import nice
from loguru import logger as log
from modules.processlock import plock
import modules.logging

__name__ = 'webserver'

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--debug', action='store_true', help='verbose output (debug)')

args = parser.parse_args()


def checkdebuglog(record):
    if record['level'] == 'DEBUG' or record['level'] == 'TRACE':
        return True
    else:
        return False


# Json logging pyarklog.json
log.add(sink=jsonlogfile, level=19, buffering=1, enqueue=True, backtrace=False, diagnose=False, serialize=True, colorize=True, format=modules.logging.shortlogformat)
# Color logging pyark.log
log.add(sink=colorlogfile, level=20, buffering=1, enqueue=True, backtrace=False, diagnose=False, colorize=True, format=modules.logging.longlogformat)
# Debug json logging debuglog.json

if args.debug:
    lev = 10
    log.add(sink=jsondebugfile, level=lev, buffering=1, enqueue=True, backtrace=True, diagnose=True, serialize=True, colorize=True, format=modules.logging.shortlogformat, delay=True, filter=checkdebuglog)
    log.add(sink=debugfile, level=lev, buffering=1, enqueue=True, backtrace=True, diagnose=True, serialize=False, colorize=True, format=modules.logging.longlogformat, delay=True)

nice(12)

if args.debug:
    app = create_app('config.DevelopmentConfig')
    socketio.run(app, host=webserver_ip, port=51501)
else:
    app = create_app('config.BaseConfig')
    socketio.run(app, host=webserver_ip, port=webserver_port)
